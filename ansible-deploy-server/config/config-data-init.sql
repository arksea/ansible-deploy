INSERT INTO `sys_roles` (`id`, `available`, `description`, `role`) VALUES (1, b'1', '系统信息增、删、改：用户，群组，主机', '系统管理员');
INSERT INTO `sys_roles` (`id`, `available`, `description`, `role`) VALUES (2, b'1', '系统信息查询：用户、群组、主机', '系统信息查询');
INSERT INTO `sys_roles` (`id`, `available`, `description`, `role`) VALUES (3, b'1', '应用部署', '应用部署');
INSERT INTO `sys_roles` (`id`, `available`, `description`, `role`) VALUES (4, b'1', '主机与端口管理', '主机管理');
INSERT INTO `sys_roles` (`id`, `available`, `description`, `role`) VALUES (5, b'1', '添加应用类型，编辑应用操作脚本', '操作管理');
INSERT INTO `sys_roles` (`id`, `available`, `description`, `role`) VALUES (6, b'1', '查看操作脚本', '操作查询');
INSERT INTO `sys_roles` (`id`, `available`, `description`, `role`) VALUES (7, b'1', '应用增、删、改', '应用管理');
INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (1, b'1', '组信息管理', '组管理:修改', 902);
INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (2, b'1', '组信息查询', '组管理:查询', 901);
INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (3, b'1', '用户信息管理', '用户管理:修改', 902);
INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (4, b'1', '用户信息查询', '用户管理:查询', 3);
INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (5, b'1', '应用管理', '应用:修改', NULL);
INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (6, b'1', '执行应用的操作脚本', '应用:操作', NULL);
INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (7, b'1', '应用信息查询', '应用:查询', NULL);
INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (8, b'1', '端口管理', '端口管理:修改', NULL);
INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (9, b'1', '端口查询', '端口管理:查询', 901);
INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (10, b'1', '增删改操作信息', '操作管理:修改', NULL);
INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (11, b'1', '查询操作脚本', '操作管理:查询', NULL);
INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (12, b'1', '主机管理', '主机管理:修改', NULL);
INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (13, b'1', '主机查询', '主机管理:查询', 901);
INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (901, b'1', '查询系统信息', '系统:查询', 902);
INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (902, b'1', '增删改系统信息', '系统:管理', NULL);
INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (1, 902);
INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (2, 7);
INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (2, 901);
INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (3, 6);
INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (3, 7);
INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (4, 8);
INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (4, 9);
INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (4, 12);
INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (4, 13);
INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (5, 10);
INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (5, 11);
INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (6, 11);
INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (7, 5);
INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (7, 7);
INSERT INTO `dp2_app_type` (`id`, `description`, `name`) VALUES (1, 'Java Web应用，容器为Tomcat8.0.3', 'Tomcat');
INSERT INTO `dp2_app_type` (`id`, `description`, `name`) VALUES (2, 'Java应用，不依赖于容器，直接使用java -jar方式启动', 'JavaServer');
INSERT INTO `dp2_app_type` (`id`, `description`, `name`) VALUES (3, '用Shell脚本启动的应用: 启动(startup.sh)，停止(shutdown.sh)', 'Command');
INSERT INTO `dp2_app_type` (`id`, `description`, `name`) VALUES (4, '用Kubectl命令部署JavaServer应用到Kubernetes集群', 'JavaForKubernetes');
INSERT INTO `dp2_app_type` (`id`, `description`, `name`) VALUES (5, '用Kubectl命令部署Tomcat应用到Kubernetes集群', 'TomcatForKubernetes');
INSERT INTO `dp2_port_type` (`id`, `all_count`, `description`, `name`, `rest_count`) VALUES (1, 0, 'Web站点或RestAPI接口', 'HTTP', 0);
INSERT INTO `dp2_port_type` (`id`, `all_count`, `description`, `name`, `rest_count`) VALUES (2, 0, '通用端口', '通用', 0);
INSERT INTO `dp2_port_type` (`id`, `all_count`, `description`, `name`, `rest_count`) VALUES (3, 0, '应用服务端口', '应用', 0);
INSERT INTO `dp2_port_type` (`id`, `all_count`, `description`, `name`, `rest_count`) VALUES (4, 0, '旧系统已用端口', '旧端口', 0);
INSERT INTO `dp2_port_type` (`id`, `all_count`, `description`, `name`, `rest_count`) VALUES (8, 0, 'JMX监控', 'JMX', 0);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (1, 1, '', '服务管理端口', '', 'server_port', 2);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (2, 1, '', 'HTTP端口', '', 'http_port', 1);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (3, 1, '', 'HTTPS端口', '', 'https_port', 2);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (4, 1, '', 'AJP端口', '', 'ajp_port', 2);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (5, 1, '', 'JMX监控端口', '', 'jmx_port', 8);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (6, 2, '', 'JMX监控端口', '', 'jmx_port', 8);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (8, 1, '3', '线程池最小线程数', '', 'min_threads', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (9, 1, '24', '线程池最大线程数', '', 'max_threads', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (13, 4, '5', '最小启动等待时间(秒)', '', 'min_ready_seconds', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (14, 4, '172.17.149.10:5000', 'Docker仓库地址', '', 'docker_registry', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (15, 4, '1800', '构建任务超时时间(秒)', '', 'active', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (16, 4, 'git@172.17.149.8:<GROUP>/<PROJECT>.git', '源代码Git地址', '', 'git_url', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (17, 4, '3600', '构建任务自动删除时间(秒)', '', 'ttl', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (19, 4, '', '服务端口', '', 'server_port', 3);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (20, 4, '', 'JMX监控端口', '', 'jmx_port', 8);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (21, 5, '172.17.149.10:5000', 'Docker仓库地址', '', 'docker_registry', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (22, 5, '3600', '构建任务自动删除时间(秒)', '', 'ttl', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (23, 5, '', 'JMX监控端口', '', 'jmx_port', 8);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (25, 5, '1800', '构建任务超时时间(秒)', '', 'active', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (26, 5, '', 'HTTP服务端口', '', 'http_port', 1);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (27, 5, 'git@172.17.149.8:<GROUP>/<PROJECT>.git', '源代码Git地址', '', 'git_url', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (28, 5, '5', '最小启动等待时间(秒)', '', 'min_ready_seconds', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (32, 5, '', 'HTTPS端口', '', 'https_port', 2);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (33, 1, '1800', '构建任务超时时间(秒)', '', 'active', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (34, 1, '172.17.149.10:5000', 'Docker仓库地址', '', 'docker_registry', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (35, 1, 'git@172.17.149.8:<GROUP>/<PROJECT>.git', '源代码Git地址', '', 'git_url', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (36, 1, '3600', '构建任务自动删除时间(秒)', '', 'ttl', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (37, 2, 'git@172.17.149.8:<GROUP>/<PROJECT>.git', '源代码Git地址', '', 'git_url', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (38, 2, '3600', '构建任务自动删除时间(秒)', '', 'ttl', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (39, 2, '5', '最小启动等待时间(秒)', '', 'min_ready_seconds', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (40, 2, '1800', '构建任务超时时间(秒)', '', 'active', NULL);
INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (41, 2, '172.17.149.10:5000', 'Docker仓库地址', '', 'docker_registry', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (1, 4, 'publishOnline', '构建任务', '', 'build_task', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (2, 4, 'publish/online', '构建任务结果路径（相对于工作目录）', '', 'build_dest', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (3, 4, 'master', '源代码分支', '', 'git_branches', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (4, 4, '', '构建任务工作目录（留空则为代码迁出目录）', '', 'build_path', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (6, 4, 'default', '目标Kubernetes集群', '', 'cluster_name', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (7, 4, '500m', '容器CPU上限', '', 'limit_cpu', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (8, 4, '1Gi', '容器本地临时存储上限', '', 'limit_ephemeral_storage', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (9, 4, '256Mi', '容器内存上限', '', 'limit_memory', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (10, 4, '500Mi', '容器本地临时存储', '', 'request_eph_storage', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (11, 4, '128Mi', '容器内存', '', 'request_memory', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (12, 4, '250m', '容器CPU', '', 'request_cpu', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (13, 5, '500m', '容器CPU核心数上限(1=1000m)', '', 'limit_cpu', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (14, 5, '500Mi', '容器本地临时存储', '', 'request_eph_storage', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (15, 5, '1Gi', '容器本地临时存储上限', '', 'limit_ephemeral_storage', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (16, 5, 'publishOnline', 'Gradle构建任务名', '', 'build_task', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (17, 5, 'publish/online', '构建任务结果路径（相对于工作目录）', '', 'build_dest', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (18, 5, '256Mi', '容器内存上限', '', 'limit_memory', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (19, 5, '250m', '容器CPU核心数(1=1000m)', '', 'request_cpu', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (20, 5, 'default', '目标Kubernetes集群', '', 'cluster_name', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (21, 5, '128Mi', '容器内存', '', 'request_memory', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (22, 5, '', 'Gradle构建任务工作目录（相对路径，留空则为代码迁出目录）', '', 'build_path', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (23, 5, 'master', '源代码分支', '', 'git_branches', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (24, 4, 'false', '是否使用宿主机IP', '', 'host_network', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (25, 4, '1', '部署副本数', '', 'replicas', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (26, 5, '1', '部署副本数', '', 'replicas', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (27, 5, '24', '线程池最大线程数', '', 'max_threads', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (28, 5, 'false', '是否使用宿主机IP', '', 'host_network', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (29, 5, '3', '线程池最小线程数', '', 'min_threads', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (30, 4, 'false', '是否注册到前端代理（Haproxy）', '', 'expose_service', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (31, 4, '/', '前端代理分发规则:路径前缀', '', 'ingress_path', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (32, 4, '*', '前端代理分发规则:域名', '', 'ingress_domain', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (33, 5, '*', '前端代理分发规则:域名', '', 'ingress_domain', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (34, 5, 'false', '是否对集群外暴露服务接口，即注册到前端代理进行流量分发与均衡', '', 'expose_service', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (35, 5, '/', '前端代理分发规则:路径前缀', '', 'ingress_path', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (36, 1, 'publish/online', '构建任务结果路径（相对于工作目录）', '', 'build_dest', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (37, 1, 'publishOnline', 'Gradle构建任务名', '', 'build_task', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (38, 1, 'master', '源代码分支', '', 'git_branches', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (39, 1, '', 'Gradle构建任务工作目录（相对路径，留空则为代码迁出目录）', '', 'build_path', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (40, 2, 'develop', '源代码分支', '', 'git_branches', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (41, 2, 'publish/online', '构建任务结果路径（相对于工作目录）', '', 'build_dest', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (42, 2, 'publishOnline', '构建任务', '', 'build_task', NULL);
INSERT INTO `dp2_version_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (43, 2, '', '构建任务工作目录（留空则为代码迁出目录）', '', 'build_path', NULL);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (1, 'play.sh', '在目标主机安装运行环境：包括创建用户、安装配置JDK、Tomcat等运行环境', '安装', 0, 'COMMON', 1);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (2, 'play.sh', '请求服务心跳API接口，将其设置为OFFLINE状态', '下线', 0, 'COMMON', 1);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (3, 'play.sh', '请求服务心跳API接口，将其设置为ONLINE状态', '上线', 0, 'COMMON', 1);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (4, 'play.sh', '访问心跳API接口，测试服务在线状态', '状态', 0, 'STATUS', 1);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (5, 'play.sh', '从部署SVN更新资源并重启服务，更新前会先将其设置为OFFLINE状态并停止服务', '部署', 0, 'COMMON', 1);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (8, 'play.sh', '停止Tomcat服务进程', '停止', 0, 'COMMON', 1);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (9, 'play.sh', '启动Tomcat服务', '启动', 0, 'COMMON', 1);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (10, 'play.sh', '在目标主机安装运行环境：包括创建用户、安装配置JDK等运行环境', '安装', 0, 'COMMON', 2);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (11, 'play.sh', '用PS命令测试Java进程是否正在运行', '状态', 0, 'STATUS', 2);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (12, 'play.sh', '停止Java服务，并删除旧资源，从部署SVN获取新资源后，启动Java服务', '部署', 0, 'COMMON', 2);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (13, 'play.sh', '停止Java进程', '停止', 0, 'COMMON', 2);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (14, 'play.sh', '启动Java服务', '启动', 0, 'COMMON', 2);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (15, 'play.sh', '在目标主机删除安装的文件，删除创建的用户，移除自启动设置等', '删除', 0, 'DELETE', 1);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (16, 'play.sh', '在目标主机安装运行环境：创建用户、在/etc/init.d配置服务启动脚本', '安装', 0, 'COMMON', 3);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (17, 'play.sh', '停止应用，并删除旧资源，从部署SVN获取新资源后，启动应用', '部署', 0, 'COMMON', 3);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (18, 'play.sh', '用PS命令测试进程是否正在运行', '状态', 0, 'STATUS', 3);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (19, 'play.sh', '启动服务', '启动', 0, 'COMMON', 3);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (20, 'play.sh', '停止服务', '停止', 0, 'COMMON', 3);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (21, 'play.sh', '在目标主机删除安装的文件，删除创建的用户，移除自启动设置等', '删除', 0, 'DELETE', 3);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (22, 'play.sh', '删除应用全局资源，比如部署资源库', '删除应用', 0, 'DELETE_APP', 3);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (23, 'play.sh', '删除应用全局资源，比如部署资源库', '删除应用', 0, 'DELETE_APP', 1);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (24, 'play.sh', '在目标主机删除安装的文件，删除创建的用户，移除自启动设置等', '删除', 0, 'DELETE', 2);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (25, 'play.sh', '删除应用全局资源，比如部署资源库', '删除应用', 0, 'DELETE_APP', 2);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (26, 'play.sh', '请求服务心跳API接口，将其设置为TEST状态', 'QA', 0, 'COMMON', 1);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (27, 'play.sh', '将应用部署到Kubernetes集群', '部署', 0, 'COMMON', 4);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (28, 'play.sh', '构建代码并发布Docker映像', '构建并发布', 0, 'BUILD', 4);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (29, 'play.sh', '删除应用全局资源，比如部署资源库', '删除主机', 0, 'DELETE', 4);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (31, 'play.sh', '构建代码并发布Docker映像，然后自动开始部署', '构建发布并部署', 0, 'BUILD', 4);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (33, 'play.sh', '查询所有节点日志', '日志', 0, 'STATUS', 4);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (34, 'play.sh', '列出应用部署的节点', '节点', 0, 'STATUS', 4);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (35, 'play.sh', '构建代码并发布Docker映像', '构建并发布', 0, 'BUILD', 5);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (36, 'play.sh', '用已发布的映像部署应用', '部署', 0, 'COMMON', 5);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (37, 'play.sh', '列出应用部署的节点', '节点', 0, 'STATUS', 5);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (38, 'play.sh', '查询所有节点日志', '日志', 0, 'STATUS', 5);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (39, 'play.sh', '构建代码并发布Docker映像，然后自动开始部署', '构建发布并部署', 0, 'BUILD', 5);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (40, 'play.sh', '构建代码', '构建', 0, 'COMMON', 5);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (41, 'play.sh', '在最后两个版本间切换', '回滚', 0, 'COMMON', 5);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (42, 'play.sh', '在最后两个版本间切换', '回滚', 0, 'COMMON', 4);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (45, 'play.sh', '重启应用容器', '重启', 0, 'COMMON', 4);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (46, 'play.sh', '重启应用容器', '重启', 0, 'COMMON', 5);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (47, 'play.sh', '用指定分支代码构建并提交结果到SVN，然后将之部署到指定服务器', '构建并部署', 0, 'BUILD', 1);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (48, 'play.sh', '用指定分支代码构建并提交结果到SVN，然后将之部署到指定服务器', '构建并部署', 0, 'BUILD', 2);
INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (49, 'play.sh', '停止并删除应用容器实例', '停止', 0, 'COMMON', 4);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (1, '- hosts: deploy_target\n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 添加用户组"tomcat"\n      group: name=tomcat\n      become: yes\n\n    - name: 添加应用运行用户"{{ apptag }}"\n      user: name={{apptag}} group=tomcat createhome=yes\n      become: yes\n\n    - name: 判断JDK目录是否已存在\n      stat: path=/opt/jdk1.8.0_66\n      register: jdkDir\n\n    - name: 下载JDK\n      subversion: repo=svn://10.79.186.29:8000/download/jdk/jdk-8u66-linux-x64.tar.gz dest=/opt/jdk-8u66-linux-x64.tar.gz force=yes export=yes username=deploy password=unicorn4Felink\n      become: yes\n      when: jdkDir.stat.exists == false\n\n    - name: 解压JDK安装包\n      unarchive: src=/opt/jdk-8u66-linux-x64.tar.gz dest=/opt copy=no\n      become: yes\n      when: jdkDir.stat.exists == false\n\n    - name: 修改JDK目录owner与group\n      file: path=/opt//opt/jdk1.8.0_66 owner=root group=root state=directory recurse=yes\n      become: yes\n      when: jdkDir.stat.exists == false\n\n    - name: 判断Tomcat目录是否已存在\n      stat: path=/home/{{apptag}}/tomcat-8.0.30\n      register: tomcatDir\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 从SVN下载Tomcat8\n      subversion: repo=svn://10.79.186.29:8000/download/tomcat/tomcat8 dest=/home/{{apptag}}/tomcat-8.0.30 force=no export=yes username=deploy password=unicorn4Felink\n      notify: restart tomcat\n      become: yes\n      become_user: "{{apptag}}"\n      when: tomcatDir.stat.exists == false\n\n    - name: 为Tomcat目录创建软连接\n      file: src=/home/{{apptag}}/tomcat-8.0.30 path=/home/{{apptag}}/tomcat state=link\n      become: yes\n      become_user: "{{apptag}}"\n      when: tomcatDir.stat.exists == false\n\n    - name: 使用模版配置Tomcat服务器\n      template: src=server.xml dest=/home/{{apptag}}/tomcat/conf/\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 配置Tomcat环境变量\n      template: src=setenv.sh dest=/home/{{apptag}}/tomcat/bin/setenv.sh mode=0644 owner={{apptag}} group=tomcat\n      become: yes\n\n    - name: 配置 jmx 访问权限\n      template: src=jmx.access dest=/home/{{apptag}}/tomcat/bin/ mode=0400 owner={{apptag}} group=tomcat\n      become: yes\n\n    - name: 配置 jmx 账号密码\n      template: src=jmx.password dest=/home/{{apptag}}/tomcat/bin/ mode=0400 owner={{apptag}} group=tomcat\n      become: yes\n\n    - name: 安装系统服务\n      template: src=tomcat-initscript.sh dest=/etc/init.d/tomcat-{{apptag}} mode=0755\n      become: yes\n\n- hosts: svnhost\n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 确认SVN库是否已创建\n      stat: path=/data/javasvn/{{apptag}}\n      register: rep\n      become: true\n\n    - name: 初始化SVN库目录 \n      command: chdir=/data/javasvn svnadmin create {{apptag}}\n      when: rep.stat.exists == False\n      become: true\n\n    - name: 配置SVN库\n      copy: src=svnserve.conf dest=/data/javasvn/{{apptag}}/conf mode=644\n      become: true\n', 'operation.yml', 1);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (2, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 1);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (3, '<?xml version=\'1.0\' encoding=\'utf-8\'?>\n<Server port="{{ server_port }}" shutdown="SHUTDOWN">\n  <Listener className="org.apache.catalina.startup.VersionLoggerListener" />\n  <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />\n  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />\n  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />\n  <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />\n  <Service name="Catalina">\n    <Executor name="tomcatThreadPool" namePrefix="catalina-exec-" maxThreads="{{ max_threads }}" minSpareThreads="{{ min_threads }}"/>   \n    <Connector port="{{ http_port }}" protocol="HTTP/1.1"\n               connectionTimeout="10000"\n               executor="tomcatThreadPool"\n               acceptorThreadCount="2"\n               acceptCount="1024"\n               processorCache="6000"\n               compression="on"\n               compressionMinSize="1024"\n               compressableMimeType="text/html,text/xml,text/javascript,text/css,text/plain,application/json"\n               redirectPort="{{ https_port }}" />\n\n    <Connector port="{{ ajp_port }}" protocol="AJP/1.3" redirectPort="{{ https_port }}" />\n    <Engine name="Catalina" defaultHost="localhost">\n      <Host name="localhost"  appBase="webapps/{{apptag}}" unpackWARs="false" autoDeploy="false">\n        <Context path="" docBase=""  reloadable="true" caseSensitive="false" debug="0"></Context>\n      </Host>\n    </Engine>\n  </Service>\n</Server>\n', 'server.xml', 1);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (4, '#!/bin/bash\nulimit -u 10240\nexport JAVA_HOME=/opt/jdk1.8.0_66\nexport PRODUCT_HOME=/home/{{apptag}}\nJAVA_OPTS="$JAVA_OPTS {{exec_opt}}"\nJAVA_OPTS="$JAVA_OPTS -XX:+UseG1GC -XX:+PrintClassHistogram -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCDetails"\nJAVA_OPTS="$JAVA_OPTS -Xloggc:$PRODUCT_HOME/tomcat/logs/gc.log"\nJAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.ssl=false"\nJAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.port={{jmx_port}} -Dcom.sun.management.jmxremote.rmi.port={{jmx_port}} -Djava.rmi.server.hostname={{inventory_hostname}}"\nJAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.password.file=$PRODUCT_HOME/tomcat/bin/jmx.password -Dcom.sun.management.jmxremote.access.file=$PRODUCT_HOME/tomcat/bin/jmx.access"\nexport JAVA_OPTS\n\nexport LANG=en_US.UTF-8\n', 'setenv.sh', 1);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (5, 'user   readonly\nadmin  readwrite \\\n              create javax.management.monitor.*,javax.management.timer.* \\\n              unregister\n', 'jmx.access', 1);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (6, 'admin  unicornAdmin\nuser  unicorn', 'jmx.password', 1);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (7, '#!/bin/bash\n#\n# chkconfig: 345 99 28\n# description: Starts/Stops Apache Tomcat\n#\n \nexport CATALINA_HOME=/home/{{apptag}}/tomcat  \nexport CATALINA_BASE=/home/{{apptag}}/tomcat\nexport TOMCAT_USER={{apptag}}\nexport LANG=en_US.UTF-8\n \n#TOMCAT_USAGE is the message if this script is called without any options\nTOMCAT_USAGE="Usage: $0 {\\e[00;32mstart\\e[00m|\\e[00;31mstop\\e[00m|\\e[00;32mstatus\\e[00m|\\e[00;31mrestart\\e[00m}"\n \n#SHUTDOWN_WAIT is wait time in seconds for java proccess to stop\nSHUTDOWN_WAIT=20\n \ntomcat_pid() {\n  echo `ps -fe | grep $CATALINA_BASE | grep -v grep | tr -s " "|cut -d" " -f2`\n}\n \nstart() {\n  pid=$(tomcat_pid)\n  if [ -n "$pid" ]\n  then\n    echo -e "\\e[00;31mTomcat is already running (pid: $pid)\\e[00m"\n  else\n    echo -e "\\e[00;32mStarting tomcat\\e[00m"\n    #ulimit -n 100000\n    #umask 007\n    su - $TOMCAT_USER -c $CATALINA_HOME/bin/startup.sh\n    status\n  fi\n  return 0\n}\n \nstatus(){\n  pid=$(tomcat_pid)\n  if [ -n "$pid" ]; then echo -e "\\e[00;32mTomcat is running with pid: $pid\\e[00m"\n  else echo -e "\\e[00;31mTomcat is not running\\e[00m"\n  fi\n}\n \nstop() {\n  pid=$(tomcat_pid)\n  if [ -n "$pid" ]\n  then\n    echo -e "\\e[00;31mStoping Tomcat\\e[00m"\n    su - $TOMCAT_USER -c $CATALINA_HOME/bin/shutdown.sh\n    sleep 3\n    # Notify the Java Runtime ShutdownHooks\n    kill $pid\n    sleep 2\n    let kwait=$SHUTDOWN_WAIT\n    count=0;\n    until [ `ps -p $pid | grep -c $pid` = \'0\' ] || [ $count -gt $kwait ]\n    do\n      echo -n -e "\\n\\e[00;31mwaiting for processes to exit\\e[00m";\n      sleep 1\n      let count=$count+1;\n    done\n    if [ $count -gt $kwait ]; then\n      echo -n -e "\\n\\e[00;31mkilling processes which didn\'t stop after $SHUTDOWN_WAIT seconds\\e[00m"\n      kill -9 $pid\n    fi\n  else\n    echo -e "\\e[00;31mTomcat is not running\\e[00m"\n  fi\n \n  return 0\n}\n \ncase "$1" in\nstart)   start;;\nstop)    stop;;\nrestart) stop\n    start\n    ;;\nstatus)  status;;\n*)  echo -e $TOMCAT_USAGE;;\nesac\nexit 0\n', 'tomcat-initscript.sh', 1);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (8, '[general]\nanon-access = none\nauth-access = write\npassword-db = ../../passwd\nauthz-db = ../../authz', 'svnserve.conf', 1);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (10, '[svnhost]\n10.79.186.29\n\n', 'hosts', 1);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (11, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n\n    - name: 测试服务是否运行\n      shell: ps ax | grep /home/{{apptag}}/tomcat | grep java | grep -v grep | awk \'{print $1}\'\n      register: running\n\n    - name: 将服务置为离线状态\n      uri:\n        url: http://localhost:{{http_port}}/heartbeat\n        method: PUT\n        body: "OFFLINE;c701e78243404508a08f021a4ac8966d"\n      when: running.stdout!=\'\'\n      ignore_errors: yes\n\n    - name: 确认服务已在离线状态\n      uri: \n          url: http://localhost:{{http_port}}/heartbeat\n          return_content: true\n      register: heartbeat\n      failed_when: "\'OFFLINE\' not in heartbeat.content"\n      when: running.stdout!=\'\'\n      ignore_errors: yes\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},离线,offline,状态,"\n      when: running.stdout!=\'\' and "\'OFFLINE\' in heartbeat.content"\n\n    - name: 延迟10秒\n      wait_for: \'timeout=10\'\n      delegate_to: localhost\n      when: running.stdout!=\'\'\n\n    - name: 停止Tomcat服务\n      service: name=tomcat-{{apptag}} state=stopped\n      become: yes\n\n    - name: 确认服务端口已关闭\n      wait_for: \'port={{http_port}} state=stopped timeout=30\'\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},已停止,stopped,状态,"\n\n    - name: 等待10秒\n      wait_for: \'timeout=10\'\n      delegate_to: localhost\n      when: running.stdout!=\'\'\n\n    - name: 删除旧部署文件\n      file: path=/home/{{apptag}}/tomcat/webapps/{{apptag}} state=absent\n      become: yes\n\n    - name: 从资源库下载部署文件\n      subversion: repo=svn://10.79.186.29:8000/{{apptag}}/{{repository}} dest=/home/{{apptag}}/tomcat/webapps/{{apptag}} force=no export=yes username=deploy password=unicorn4Felink revision={{revision}}\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 查询版本信息\n      shell: svn info svn://10.79.186.29:8000/{{apptag}}/{{repository}} --username deploy --password unicorn4Felink  --no-auth-cache\n      register: verinfo\n\n    - name: 保存版本信息\n      copy:\n        content: \'{{ verinfo.stdout }}\'\n        dest: /home/{{apptag}}/REVISION\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 显示版本信息\n      debug:\n        msg: "{{ verinfo.stdout }}"\n\n    - name: 启动Tomcat服务\n      service: name=tomcat-{{apptag}} state=started\n      become: yes\n\n    - name: 等待服务启动\n      wait_for: \'port={{http_port}} state=started timeout=30\'\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},运行中,running,状态,"\n\n    - name: 等待10秒\n      wait_for: \'timeout=10\'\n      delegate_to: localhost\n\n    - name: 状态测试\n      uri: \n          url: http://localhost:{{http_port}}/heartbeat\n          return_content: true\n      register: status\n      ignore_errors: yes\n\n    - name: 设置离线状态\n      debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},离线,offline,状态,"\n      when: "\'OFFLINE\' in status.content"\n\n    - name: 设置在线状态\n      debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},在线,online,状态,"\n      when: "\'ONLINE\' in status.content"\n', 'operation.yml', 5);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (12, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 5);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (13, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 将服务置为离线状态\n      uri:\n        url: http://localhost:{{http_port}}/heartbeat\n        method: PUT\n        body: "OFFLINE;c701e78243404508a08f021a4ac8966d"\n\n    - name: 确认服务已在离线状态\n      uri: \n          url: http://localhost:{{http_port}}/heartbeat\n          return_content: true\n      register: heartbeat\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},离线,offline,状态,"\n      when: (\'OFFLINE\' in heartbeat.content)\n', 'operation.yml', 2);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (14, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 2);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (15, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 将服务置为在线状态\n      uri:\n        url: http://localhost:{{http_port}}/heartbeat\n        method: PUT\n        body: "ONLINE;c701e78243404508a08f021a4ac8966d"\n\n    - name: 确认服务已在线\n      uri: \n          url: http://localhost:{{http_port}}/heartbeat\n          return_content: true\n      register: heartbeat\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},在线,online,状态,"\n      when: "\'ONLINE\' in heartbeat.content"', 'operation.yml', 3);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (16, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 3);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (17, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible-2.2.0\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport GROOVY_HOME=$HOME/groovy-2.4.10\nexport JAVA_HOME=/opt/jdk1.8.0_66\nexport JAVA_OPTS="-Dfile.encoding=utf-8"\nexport PATH=$PATH:$ANSIBLE_HOME/bin:$GROOVY_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 4);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (18, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n  - name: 获取进程PID\n    shell: ps ax | grep /home/{{apptag}}/tomcat | grep java | grep -v grep | awk \'{print $1}\'\n    register: running\n\n  - name: 设置运行状态\n    debug:\n      msg: "@@SET_HOST_STATUS {{inventory_hostname}},运行中,running,"\n    when: running.stdout!=""\n\n  - name: 设置未运行状态\n    debug:\n      msg: "@@SET_HOST_STATUS {{inventory_hostname}},已停止,stopped,"\n    when: running.stdout==""\n\n  - name: 状态测试\n    uri: \n        url: http://localhost:{{http_port}}/heartbeat\n        return_content: true\n    register: status\n    when: running.stdout!=""\n\n  - name: 设置离线状态\n    debug:\n      msg: "@@SET_HOST_STATUS {{inventory_hostname}},离线,offline,"\n    when: running.stdout!="" and (\'OFFLINE\' in status.content)\n\n  - name: 设置在线状态\n    debug:\n      msg: "@@SET_HOST_STATUS {{inventory_hostname}},在线,online,"\n    when: running.stdout!="" and (\'ONLINE\' in status.content)\n\n  - name: 设置QA状态\n    debug:\n      msg: "@@SET_HOST_STATUS {{inventory_hostname}},QA,online,"\n    when: running.stdout!="" and (\'TEST\' in status.content)', 'operation.yml', 4);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (22, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 8);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (23, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 测试服务是否运行\n      wait_for: \'port={{http_port}} state=started timeout=10\'\n      register: running\n\n    - name: 将服务置为离线状态\n      uri:\n        url: http://localhost:{{http_port}}/heartbeat\n        method: PUT\n        body: "OFFLINE;c701e78243404508a08f021a4ac8966d"\n      when: running.state==\'started\'\n      ignore_errors: yes\n\n    - name: 确认服务已在离线状态\n      uri: \n          url: http://localhost:{{http_port}}/heartbeat\n          return_content: true\n      become: yes\n      register: heartbeat\n      failed_when: "\'OFFLINE\' not in heartbeat.content"\n      when: running.state==\'started\'\n      ignore_errors: yes\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},离线,offline,状态,"\n      when: "\'OFFLINE\' in heartbeat.content"\n\n    - name: 延迟10秒\n      wait_for: \'timeout=10\'\n      delegate_to: localhost\n      when: running.state==\'started\'\n\n    - name: 停止Tomcat服务\n      service: name=tomcat-{{apptag}} state=stopped\n      become: yes\n\n    - name: 等待服务停止\n      wait_for: \'port={{http_port}} state=stopped timeout=30\'\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},已停止,stopped,状态,"\n', 'operation.yml', 8);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (24, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 9);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (25, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 启动Tomcat服务\n      service: name=tomcat-{{apptag}} state=started\n      become: yes\n\n    - name: 等待服务启动\n      wait_for: \'port={{http_port}} state=started timeout=30\'\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},运行中,running,状态,"\n\n    - name: 状态测试\n      uri: \n          url: http://localhost:{{http_port}}/heartbeat\n          return_content: true\n      become: yes\n      register: status\n\n    - name: 设置离线状态\n      debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},离线,offline,状态,"\n      when: "\'OFFLINE\' in status.content"\n\n    - name: 设置在线状态\n      debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},在线,online,状态,"\n      when: "\'ONLINE\' in status.content"', 'operation.yml', 9);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (26, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 10);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (27, '- hosts: deploy_target\n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 添加应用运行用户"{{ apptag }}"\n      user: name={{apptag}} createhome=yes\n      become: yes\n      \n    - name: 判断JDK目录是否已存在\n      stat: path=/opt/jdk1.8.0_66\n      register: jdkDir\n\n    - name: 下载JDK\n      subversion: repo=svn://10.79.186.29:8000/download/jdk/jdk-8u66-linux-x64.tar.gz dest=/opt/jdk-8u66-linux-x64.tar.gz force=yes export=yes username=deploy password=unicorn4Felink\n      become: yes\n      when: jdkDir.stat.exists == false\n\n    - name: 解压JDK安装包\n      unarchive: src=/opt/jdk-8u66-linux-x64.tar.gz dest=/opt copy=no\n      become: yes\n      when: jdkDir.stat.exists == false\n\n    - name: 修改JDK目录owner与group\n      file: path=/opt//opt/jdk1.8.0_66 owner=root group=root state=directory recurse=yes\n      become: yes\n      when: jdkDir.stat.exists == false\n\n    - name: 创建bin目录\n      file: path=\'bin\' state=directory mode=0755\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 创建logs目录\n      file: path=\'logs\' state=directory mode=0755\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 配置获取PID脚本\n      template: src=showpid.sh dest=/home/{{apptag}}/bin/showpid.sh mode=0755\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 配置启动进程脚本\n      template: src=startup.sh dest=/home/{{apptag}}/bin/startup.sh mode=0755\n      become: yes\n      become_user: "{{apptag}}"\n      \n    - name: 配置停止进程脚本\n      template: src=shutdown.sh dest=/home/{{apptag}}/bin/shutdown.sh mode=0755\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 配置 jmx 访问权限\n      template: src=jmx.access dest=/home/{{apptag}}/bin/ mode=0400\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 配置 jmx 账号密码\n      template: src=jmx.password dest=/home/{{apptag}}/bin/ mode=0400\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 配置Java环境变量\n      template: src=setenv.sh dest=/home/{{apptag}}/bin/setenv.sh mode=0755\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 安装系统服务\n      template: src=java-initscript.sh dest=/etc/init.d/java-{{apptag}} mode=0755\n      become: yes\n\n    - name: 配置系统服务\n      service: name=java-{{apptag}} enabled=yes\n      become: yes\n\n- hosts: svnhost\n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 确认SVN库是否已创建\n      stat: path=/data/javasvn/{{apptag}}\n      register: rep\n      become: true\n\n    - name: 初始化SVN库目录\n      command: chdir=/data/javasvn svnadmin create {{apptag}}\n      when: rep.stat.exists == false\n      become: true\n\n    - name: 配置SVN库\n      copy: src=svnserve.conf dest=/data/javasvn/{{apptag}}/conf mode=644\n      become: true\n', 'operation.yml', 10);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (28, '#!/bin/bash\n\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\n\nif [ -r "$PRGDIR/setenv.sh" ]; then\n  . "$PRGDIR/setenv.sh"\nfi\n\nif [ -z "$APP_HOME" ]; then\n    echo ""\nelse\n    proc=`ps ax | grep $APP_HOME/{{apptag}} | grep java | grep -v grep | awk \'{print $1}\'`\n    echo $proc\nfi', 'showpid.sh', 10);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (29, '#!/bin/bash\n\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\n\nif [ -r "$PRGDIR/setenv.sh" ]; then\n  . "$PRGDIR/setenv.sh"\nfi\n\nif [ -z "$APP_HOME" ]; then\n    echo "please export \\$APP_HOME at $PRGDIR/setenv.sh"\n    exit 1\nfi\n\nproc=`sh $PRGDIR/showpid.sh`\n\nif [ "$proc" = "" ]\nthen\n  echo "the Java app not alive"\nelse\n  echo "Shutting down current running Java app(pid=$proc) : $APP_HOME"\n  kill $proc\nfi', 'shutdown.sh', 10);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (30, '#!/bin/bash\n\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\n\nif [ -r "$PRGDIR/setenv.sh" ]; then\n  . "$PRGDIR/setenv.sh"\nfi\n\nif [ -z "$APP_HOME" ]; then\n    echo "please export \\$APP_HOME at $PRGDIR/setenv.sh"\n    exit 1\nfi\n\nproc=`sh $PRGDIR/showpid.sh`\nif [ "$proc" = "" ]\nthen\n    cd $APP_HOME/{{apptag}}\n    APP_OUT="$APP_HOME"/logs/server.out\n    touch $APP_OUT\n\n    jar_file(){\n        echo `ls -t $APP_HOME/{{apptag}}/*.jar 2>/dev/null | head -1`\n    }\n    JAR_FILE=$(jar_file)\n\n    if [ -z $JAR_FILE ]; then\n        echo \'No jar file in APP_HOME: $APP_HOME\' >> "$APP_OUT"\n    else\n        echo "Using APP_HOME:   $APP_HOME" >> "$APP_OUT"\n        echo "Using JAVA_HOME:  $JAVA_HOME" >> "$APP_OUT"\n        echo "Using JAR_FILE:   $JAR_FILE" >> "$APP_OUT"\n        JAVA="$JAVA_HOME/bin/java"\n        nohup $JAVA $JAVA_OPTS -jar $JAR_FILE "$@" >> "$APP_OUT" 2>&1 &\n        msg="Java process started at $APP_HOME,(pid=$!)"\n        echo $msg\n    fi\nelse\n  msg="skipped start action, the Java app already running"\n  echo $msg\nfi\n', 'startup.sh', 10);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (31, 'user   readonly\nadmin  readwrite \\\n              create javax.management.monitor.*,javax.management.timer.* \\\n              unregister\n', 'jmx.access', 10);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (32, 'admin  unicornAdmin\nuser  unicorn', 'jmx.password', 10);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (33, '#!/bin/bash\nulimit -u 10240\nexport JAVA_HOME=/opt/jdk1.8.0_66\nexport LANG=en_US.UTF-8\nexport PRODUCT_HOME=/home/{{apptag}}\nexport APP_HOME=/home/{{apptag}}\n\nJAVA_OPTS="$JAVA_OPTS -server {{exec_opt}}"\nJAVA_OPTS="$JAVA_OPTS -XX:+UseG1GC -XX:+PrintClassHistogram -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCDetails"\nJAVA_OPTS="$JAVA_OPTS -Xloggc:$APP_HOME/logs/gc.log"\nJAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.ssl=false"\nJAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.port={{jmx_port}} -Dcom.sun.management.jmxremote.rmi.port={{jmx_port}} -Djava.rmi.server.hostname={{inventory_hostname}}"\nJAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.password.file=$PRODUCT_HOME/bin/jmx.password -Dcom.sun.management.jmxremote.access.file=$PRODUCT_HOME/bin/jmx.access"\nexport JAVA_OPTS\n', 'setenv.sh', 10);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (34, '#!/bin/bash\n#\n# chkconfig: 345 99 28\n# description: Starts/Stops Java App\n#\nexport APP_HOME=/home/{{apptag}} \nexport APP_BASE=/home/{{apptag}}\nexport APP_USER={{apptag}}\nexport LANG=en_US.UTF-8\n \n#APP_USAGE is the message if this script is called without any options\nAPP_USAGE="Usage: $0 {\\e[00;32mstart\\e[00m|\\e[00;31mstop\\e[00m|\\e[00;32mstatus\\e[00m|\\e[00;31mrestart\\e[00m}"\nAPP_NAME={{apptag}}\n \n#SHUTDOWN_WAIT is wait time in seconds for java proccess to stop\nSHUTDOWN_WAIT=20\n \napp_pid() {\n  echo `ps -fe | grep $APP_BASE/{{apptag}} | grep java | grep -v grep | tr -s " "|cut -d" " -f2`\n}\n \nstart() {\n  pid=$(app_pid)\n  if [ -n "$pid" ]\n  then\n    echo -e "\\e[00;31mJava app is already running (pid: $pid)\\e[00m"\n  else\n    echo -e "\\e[00;32mStarting java app\\e[00m"\n    #ulimit -n 100000\n    #umask 007\n    touch /var/lock/subsys/$APP_NAME\n    su - $APP_USER -c $APP_BASE/bin/startup.sh\n    status\n  fi\n  return 0\n}\n \nstatus(){\n  pid=$(app_pid)\n  if [ -n "$pid" ]; then echo -e "\\e[00;32mJava app is running with pid: $pid\\e[00m"\n  else echo -e "\\e[00;31mJava app is not running\\e[00m"\n  fi\n}\n \nstop() {\n  pid=$(app_pid)\n  if [ -n "$pid" ]\n  then\n    echo -e "\\e[00;31mStoping Java app\\e[00m"\n    rm -f /var/lock/subsys/$APP_NAME\n    su - $APP_USER -c $APP_BASE/bin/shutdown.sh\n    let kwait=$SHUTDOWN_WAIT\n    count=0;\n    until [ `ps -p $pid | grep -c $pid` = \'0\' ] || [ $count -gt $kwait ]\n    do\n      echo -n -e "\\n\\e[00;31mwaiting for processes to exit\\e[00m";\n      sleep 1\n      let count=$count+1;\n    done\n    if [ $count -gt $kwait ]; then\n      echo -n -e "\\n\\e[00;31mkilling processes which didn\'t stop after $SHUTDOWN_WAIT seconds\\e[00m"\n      kill -9 $pid\n    fi\n  else\n    echo -e "\\e[00;31mJava app is not running\\e[00m"\n  fi\n \n  return 0\n}\n \ncase "$1" in\nstart)   start;;\nstop)    stop;;\nrestart) stop\n    start\n    ;;\nstatus)  status;;\n*)  echo -e $APP_USAGE;;\nesac\nexit 0\n', 'java-initscript.sh', 10);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (36, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible-2.2.0\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport GROOVY_HOME=$HOME/groovy-2.4.10\nexport JAVA_HOME=/opt/jdk1.8.0_66\nexport JAVA_OPTS="-Dfile.encoding=utf-8"\nexport PATH=$PATH:$ANSIBLE_HOME/bin:$GROOVY_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 11);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (37, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n  - name: 获取进程PID\n    shell: ps ax | grep /home/{{apptag}}/{{apptag}} | grep java | grep -v grep | awk \'{print $1}\'\n    become: yes\n    register: running\n\n  - name: 设置运行状态\n    debug:\n      msg: "@@SET_HOST_STATUS {{inventory_hostname}},运行中,running,"\n    when: running.stdout!=""\n\n  - name: 设置未运行状态\n    debug:\n      msg: "@@SET_HOST_STATUS {{inventory_hostname}},已停止,stopped,"\n    when: running.stdout==""', 'operation.yml', 11);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (38, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 获取进程PID\n      shell: ps ax | grep /home/{{apptag}}/{{apptag}} | grep java | grep -v grep | awk \'{print $1}\'\n      become: yes\n      register: running\n\n    - name: 停止服务\n      service: name=java-{{apptag}} state=stopped\n      become: yes\n\n    - name: 等待JMX端口关闭\n      wait_for: \'port={{jmx_port}} state=stopped timeout=10\'\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},已停止,stopped,状态,"\n\n    - name: 延迟10秒\n      wait_for: \'timeout=10\'\n      delegate_to: localhost\n      when: running.stdout!=\'\'\n\n    - name: 删除旧部署文件\n      file: path=/home/{{apptag}}/{{apptag}} state=absent\n      become: yes\n\n    - name: 从资源库下载部署文件\n      subversion: repo=svn://10.79.186.29:8000/{{apptag}}/{{repository}} dest=/home/{{apptag}}/{{apptag}} force=no username=deploy password=unicorn4Felink revision={{revision}}\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 查询版本信息\n      shell: svn info svn://10.79.186.29:8000/{{apptag}}/{{repository}} --username deploy --password unicorn4Felink  --no-auth-cache\n      register: verinfo\n\n    - name: 保存版本信息\n      copy:\n        content: \'{{ verinfo.stdout }}\'\n        dest: /home/{{apptag}}/REVISION\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 显示版本信息\n      debug:\n        msg: "{{ verinfo.stdout }}"\n\n    - name: 创建日志目录链接\n      file:\n        src: /home/{{apptag}}/logs\n        dest: /home/{{apptag}}/{{apptag}}/logs\n        state: link\n      become: yes\n      become_user: "{{apptag}}"\n      ignore_errors: yes\n\n  post_tasks:\n    - name: 启动服务\n      service: name=java-{{apptag}} state=started\n      become: yes\n\n    - name: 等待服务启动\n      wait_for: \'port={{jmx_port}} state=started timeout=30\'\n\n    - name: 设置进程状态\n      debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},运行中,running,状态,"\n', 'operation.yml', 12);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (39, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 12);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (40, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 13);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (41, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 停止服务\n      service: name=java-{{apptag}} state=stopped\n      become: yes\n\n    - name: 等待服务停止\n      wait_for: \'port={{jmx_port}} state=stopped timeout=30\'\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},已停止,stopped,状态,"\n', 'operation.yml', 13);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (42, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 启动Java服务\n      service: name=java-{{apptag}} state=started\n      become: yes\n\n    - name: 等待服务启动\n      wait_for: \'port={{jmx_port}} state=started timeout=30\'\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},运行中,running,状态,"\n', 'operation.yml', 14);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (43, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 14);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (44, '[svnhost]\n10.79.186.29', 'hosts', 10);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (45, '[general]\nanon-access = none\nauth-access = write\npassword-db = ../../passwd\nauthz-db = ../../authz', 'svnserve.conf', 10);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (46, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 测试服务是否运行\n      wait_for: \'port={{http_port}} state=started timeout=5\'\n      register: running\n      ignore_errors: true\n\n    - name: 将服务置为离线状态\n      shell: curl -X PUT -d "OFFLINE;c701e78243404508a08f021a4ac8966d" http://localhost:{{http_port}}/heartbeat\n      become: yes\n      ignore_errors: true\n      when: not running.failed\n\n    - name: 延迟10秒\n      wait_for: \'timeout=10\'\n      delegate_to: localhost\n      when: not running.failed\n\n    - name: 停止Tomcat服务\n      service: name=tomcat-{{apptag}} state=stopped\n      become: yes\n      ignore_errors: true\n\n    - name: 测试服务是否运行\n      wait_for: \'port={{http_port}} state=stopped timeout=5\'\n\n    - name: 延迟5秒\n      wait_for: \'timeout=5\'\n      delegate_to: localhost\n      when: not running.failed\n\n    - name: 删除随机启动文件\n      file: path=/etc/init.d/tomcat-{{apptag}} state=absent\n      become: yes\n\n    - name: 删除用户 "{{ apptag}}"及其Home目录\n      user: name={{apptag}} state=absent remove=yes\n      become: yes\n', 'operation.yml', 15);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (47, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 15);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (48, '- hosts: deploy_target\n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 添加应用运行用户"{{ apptag }}"\n      user: name={{apptag}} createhome=yes\n      become: yes\n\n    - name: 创建logs目录\n      file: path=\'logs\' state=directory mode=0755\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 安装系统服务\n      template: src=command-initscript.sh dest=/etc/init.d/command-{{apptag}} mode=0755\n      become: yes\n\n    - name: 配置系统服务\n      service: name=command-{{apptag}} enabled=yes\n      become: yes\n\n- hosts: svnhost\n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 确认SVN库是否已创建\n      stat: path=/data/javasvn/{{apptag}}\n      register: rep\n      become: true\n\n    - name: 初始化SVN库目录\n      command: chdir=/data/javasvn svnadmin create {{apptag}}\n      when: rep.stat.exists == false\n      become: true\n\n    - name: 配置SVN库\n      copy: src=svnserve.conf dest=/data/javasvn/{{apptag}}/conf mode=644\n      become: true\n', 'operation.yml', 16);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (49, '#!/bin/bash\n#\n# chkconfig: 345 99 28\n# description: Starts/Stops Command App\n#\n \nexport APP_HOME=/home/{{apptag}}/{{apptag}}\nexport APP_BASE=/home/{{apptag}}\nexport APP_USER={{apptag}}\nexport LANG=en_US.UTF-8\n \n#APP_USAGE is the message if this script is called without any options\nAPP_USAGE="Usage: $0 {\\e[00;32mstart\\e[00m|\\e[00;31mstop\\e[00m|\\e[00;32mstatus\\e[00m|\\e[00;31mrestart\\e[00m}"\nAPP_NAME={{apptag}}\n \n#SHUTDOWN_WAIT is wait time in seconds for command proccess to stop\nSHUTDOWN_WAIT=20\n \napp_pid() {\n  echo `ps ax | grep /home/{{apptag}}/{{apptag}} | grep -v grep | awk \'{print $1}\'`\n}\n \nstart() {\n  pid=$(app_pid)\n  if [ -n "$pid" ]\n  then\n    echo -e "\\e[00;31mcommand app is already running (pid: $pid)\\e[00m"\n  else\n    echo -e "\\e[00;32mStarting command app\\e[00m"\n    touch /var/lock/subsys/$APP_NAME\n    su - $APP_USER -c $APP_HOME/startup.sh\n    status\n  fi\n  return 0\n}\n \nstatus(){\n  pid=$(app_pid)\n  if [ -n "$pid" ]; then echo -e "\\e[00;32mCommand app is running with pid: $pid\\e[00m"\n  else echo -e "\\e[00;31mCommand app is not running\\e[00m"\n  fi\n}\n \nstop() {\n  pid=$(app_pid)\n  if [ -n "$pid" ]\n  then\n    echo -e "\\e[00;31mStoping Command app: $pid\\e[00m"\n    rm -f /var/lock/subsys/$APP_NAME\n    su - $APP_USER -c $APP_HOME/shutdown.sh\n    let kwait=$SHUTDOWN_WAIT\n    count=0;\n    until [ `ps -p $pid | grep -c $pid` = \'0\' ] || [ $count -gt $kwait ]\n    do\n      echo -n -e "\\n\\e[00;31mwaiting for processes to exit\\e[00m";\n      sleep 1\n      let count=$count+1;\n    done\n    if [ $count -gt $kwait ]; then\n      echo -n -e "\\n\\e[00;31mkilling processes which didn\'t stop after $SHUTDOWN_WAIT seconds\\e[00m"\n      kill -9 $pid\n    fi\n  else\n    echo -e "\\e[00;31mCommand app is not running\\e[00m"\n  fi\n \n  return 0\n}\n \ncase "$1" in\nstart)   start;;\nstop)    stop;;\nrestart) stop\n    start\n    ;;\nstatus)  status;;\n*)  echo -e $APP_USAGE;;\nesac\nexit 0\n', 'command-initscript.sh', 16);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (50, '[svnhost]\n10.79.186.29', 'hosts', 16);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (51, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 17);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (52, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 停止服务\n      service: name=command-{{apptag}} state=stopped\n      become: yes\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},已停止,stopped,状态,"\n\n    - name: 延迟10秒\n      wait_for: \'timeout=10\'\n      delegate_to: localhost\n\n    - name: 删除旧部署文件\n      file: path=/home/{{apptag}}/{{apptag}} state=absent\n      become: yes\n\n    - name: 从资源库下载部署文件\n      subversion: repo=svn://10.79.186.29:8000/{{apptag}}/{{repository}} dest=/home/{{apptag}}/{{apptag}} force=no username=deploy password=unicorn4Felink revision={{revision}}\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: chmod startup.sh 554\n      file: state=file path=/home/{{apptag}}/{{apptag}}/startup.sh mode=554\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: chmod shutdown.sh 554\n      file: state=file path=/home/{{apptag}}/{{apptag}}/shutdown.sh mode=554\n      become: yes\n      become_user: "{{apptag}}"', 'operation.yml', 17);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (53, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n  - name: 获取进程PID\n    shell: ps ax | grep /home/{{apptag}}/{{apptag}} | grep -v grep | awk \'{print $1}\'\n    become: yes\n    register: running\n\n  - name: 设置运行状态\n    debug:\n      msg: "@@SET_HOST_STATUS {{inventory_hostname}},运行中,running,"\n    when: running.stdout!=""\n\n  - name: 设置未运行状态\n    debug:\n      msg: "@@SET_HOST_STATUS {{inventory_hostname}},已停止,stopped,"\n    when: running.stdout==""', 'operation.yml', 18);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (54, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible-2.2.0\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport GROOVY_HOME=$HOME/groovy-2.4.10\nexport JAVA_HOME=/opt/jdk1.8.0_66\nexport JAVA_OPTS="-Dfile.encoding=utf-8"\nexport PATH=$PATH:$ANSIBLE_HOME/bin:$GROOVY_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 18);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (55, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 启动服务\n      service: name=command-{{apptag}} state=started\n      become: yes\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},运行中,running,状态,"\n', 'operation.yml', 19);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (56, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 19);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (57, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 20);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (58, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 停止服务\n      service: name=command-{{apptag}} state=stopped\n      become: yes\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},已停止,stopped,状态,"\n', 'operation.yml', 20);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (59, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 16);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (60, '[general]\nanon-access = none\nauth-access = write\npassword-db = ../../passwd\nauthz-db = ../../authz', 'svnserve.conf', 16);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (61, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 21);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (62, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 停止服务\n      service: name=command-{{apptag}} state=stopped\n      become: yes\n      ignore_errors: yes\n\n    - name: 延迟5秒\n      wait_for: \'timeout=5\'\n      delegate_to: localhost\n\n    - name: 删除随机启动文件\n      file: path=/etc/init.d/command-{{apptag}} state=absent\n      become: yes\n\n    - name: 删除用户 "{{ apptag}}"及其Home目录\n      user: name={{apptag}} state=absent remove=yes\n      become: yes\n', 'operation.yml', 21);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (63, '[svnhost]\n10.79.186.29', 'hosts', 22);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (64, '- hosts: svnhost\n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除SVN库目录 \n      file: path=/data/javasvn/{{apptag}} state=absent \n      become: yes', 'operation.yml', 22);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (65, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 22);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (66, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 23);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (67, '- hosts: svnhost\n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除SVN库目录 \n      file: path=/data/javasvn/{{apptag}} state=absent \n      become: yes', 'operation.yml', 23);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (68, '[svnhost]\n10.79.186.29', 'hosts', 23);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (69, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 停止服务\n      service: name=java-{{apptag}} state=stopped\n      become: yes\n      ignore_errors: yes\n\n    - name: 延迟5秒\n      wait_for: \'timeout=5\'\n      delegate_to: localhost\n\n    - name: 等待JMX端口关闭\n      wait_for: \'port={{jmx_port}} state=stopped timeout=10\'\n\n    - name: 删除随机启动文件\n      file: path=/etc/init.d/java-{{apptag}} state=absent\n      become: yes\n\n    - name: 删除用户 "{{ apptag}}"及其Home目录\n      user: name={{apptag}} state=absent remove=yes\n      become: yes\n', 'operation.yml', 24);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (70, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 24);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (71, '[svnhost]\n10.79.186.29', 'hosts', 25);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (72, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 25);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (73, '- hosts: svnhost\n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除SVN库目录 \n      file: path=/data/javasvn/{{apptag}} state=absent \n      become: yes', 'operation.yml', 25);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (74, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 26);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (75, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 将服务置为QA状态\n      uri:\n        url: http://localhost:{{http_port}}/heartbeat\n        method: PUT\n        body: "TEST;c701e78243404508a08f021a4ac8966d"\n\n    - name: 确认服务已在线\n      uri: \n          url: http://localhost:{{http_port}}/heartbeat\n          return_content: true\n      become: yes\n      register: heartbeat\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},QA,online,状态,"\n      when: (\'TEST\' in heartbeat.content)', 'operation.yml', 26);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (77, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除旧部署文件\n      file: path=/home/op/{{apptag}}-{{version}}/ state=absent\n      become: yes\n\n    - name: 创建目录\n      file: path=\'/home/op/{{apptag}}-{{version}}\' state=directory mode=0755\n      become: yes\n      become_user: "op"\n\n    - name: 使用模版配置部署脚本\n      template: src=deployment.yml dest=/home/op/{{apptag}}-{{version}}/\n      become: yes\n      become_user: "op"\n\n    - name: 执行deployment.yml\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl apply -f deployment.yml\n      become: true\n      become_user: "op"\n      register: deployment\n\n    - name: 显示执行结果\n      debug:\n        msg: "{{ deployment.stdout }}"\n\n    - name: 使用模版配置暴露服务脚本\n      template: src=service.yml dest=/home/op/{{apptag}}-{{version}}/\n      become: yes\n      become_user: "op"\n\n    - name: 执行service.yml\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl apply -f service.yml\n      become: true\n      become_user: "op"\n      register: service\n      when: "{{ expose_service }}"\n\n    - name: 显示执行结果\n      debug:\n        msg: "{{ service.stdout }}"\n      when: "{{ expose_service }}"\n\n    - name: 使用模版配置Ingress脚本\n      template: src=ingress.yml dest=/home/op/{{apptag}}-{{version}}/\n      become: yes\n      become_user: "op"\n\n    - name: 执行ingress.yml\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl apply -f ingress.yml\n      become: true\n      become_user: "op"\n      register: ingress\n      when: "{{ expose_service }}"\n\n    - name: 显示执行结果\n      debug:\n        msg: "{{ ingress.stdout }}"\n      when: "{{ expose_service }}"\n\n    - name: 更新最近用于部署的构建号\n      uri:\n        url: http://10.79.186.29:8062/api/versions/{{version_id}}/deploy?token={{user_token}}&buildno={{build_no}}\n        method: PUT\n        body: "{{user_token}}"\n      when: "\'configured\' in deployment.stdout or \'created\' in deployment.stdout"\n\n- hosts: all_targets\n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除旧Docker映像\n      shell: docker image rm {{docker_registry}}/{{repository}}:{{version}}-b`echo $(({{build_no}}-3))`\n      become: true\n      become_user: "op"\n      ignore_errors: yes\n', 'operation.yml', 27);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (78, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nif [ -r "$PRGDIR/vars.sh" ]; then\n  . "$PRGDIR/vars.sh"\nfi\nexport JAVA_OPTS=\nset -o errexit \\\n    && ansible-playbook -i hosts operation.yml \\\n    && groovy delete-image.groovy\n', 'play.sh', 27);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (79, 'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{apptag}}-{{version}}\nspec:\n  replicas: {{replicas}}\n  selector:\n    matchLabels:\n      app: {{apptag}}\n      version: {{version}}\n  minReadySeconds: {{min_ready_seconds}}\n  template:\n    metadata:\n      labels:\n        app: {{apptag}}\n        version: {{version}}\n    spec:\n      securityContext:\n        runAsUser: 1000\n        runAsGroup: 1000\n      hostNetwork: {{host_network}}\n      containers:\n      - name: {{apptag}}\n        image: {{docker_registry}}/{{repository}}:{{version}}-b{{build_no}}\n        ports:\n        - containerPort: {{server_port}}\n          name: server\n        - containerPort: {{jmx_port}}\n          name: jmx\n        resources:\n          requests:\n            memory: "{{request_memory}}"\n            cpu: "{{request_cpu}}"\n            ephemeral-storage: "{{request_eph_storage}}"\n          limits:\n            memory: "{{limit_memory}}"\n            cpu: "{{limit_cpu}}"\n            ephemeral-storage: "{{limit_ephemeral_storage}}"', 'deployment.yml', 27);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (80, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除旧部署文件\n      file: path=/home/op/{{apptag}}/ state=absent\n      become: yes\n\n    - name: 创建目录\n      file: path=\'/home/op/{{apptag}}\' state=directory mode=0755\n      become: yes\n      become_user: "op"\n\n    - name: 使用模版配置部署脚本\n      template: src=publish.yml dest=/home/op/{{apptag}}/\n      become: yes\n      become_user: "op"\n\n    - name: 删除最近一次构建任务\n      command: chdir=/home/op/{{apptag}} kubectl delete jobs/publish-{{apptag}}-{{version}}\n      become: true\n      become_user: "op"\n      register: deleteJob\n      ignore_errors: yes\n\n    - name: 显示构建任务删除结果\n      debug:\n        msg: "{{ deleteJob.stdout }}"\n\n    - name: 配置启动进程脚本\n      template: src=startup.sh dest=/home/op/{{apptag}}/startup.sh mode=0755\n      become: yes\n      become_user: "op"\n\n    - name: 配置 jmx 访问权限\n      template: src=jmx.access dest=/home/op/{{apptag}}/jmx.access mode=0400\n      become: yes\n      become_user: "op"\n\n    - name: 配置 jmx 账号密码\n      template: src=jmx.password dest=/home/op/{{apptag}}/jmx.password mode=0400\n      become: yes\n      become_user: "op"\n\n    - name: 生成kustomization.yaml\n      template: src=kustomization.yaml dest=/home/op/{{apptag}}/kustomization.yaml\n      become: yes\n      become_user: "op"\n\n    - name: 生成部署映像\n      command: chdir=/home/op/{{apptag}} kubectl apply -k ./\n      become: true\n      become_user: "op"\n      register: apply\n\n    - name: 显示映像生成结果\n      debug:\n        msg: "{{ apply.stdout }}"\n\n    - name: 等待5秒\n      wait_for: \'timeout=5\'\n      delegate_to: localhost\n', 'operation.yml', 28);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (81, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\n\nansible-playbook -i hosts operation.yml\n\nif [ -r "$PRGDIR/vars.sh" ]; then\n  . "$PRGDIR/vars.sh"\nfi\nexport JAVA_OPTS=\nkube-api $cluster_name followJobLog publish-$apptag-$version', 'play.sh', 28);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (82, 'apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: publish-{{apptag}}-{{version}}\nspec:\n  template:\n    spec:\n      securityContext:\n        runAsUser: 1000\n        runAsGroup: 1000\n      volumes:\n      - name: sock\n        hostPath:\n            path: /var/run/docker.sock\n      - name: gradle\n        hostPath:\n            path: /opt/gradle\n      - name: publish\n        configMap:\n            name: publish-config\n            defaultMode: 256\n            items:\n            - key: startup.sh\n              path: startup.sh\n            - key: jmx.password\n              path: jmx.password\n            - key: jmx.access\n              path: jmx.access\n      containers:\n      - name: publish\n        image: {{docker_registry}}/tq/publish:java\n        volumeMounts:\n        - name: sock\n          mountPath: /var/run/docker.sock\n        - name: publish\n          mountPath: /home/gradle/publish\n        - name: gradle\n          mountPath: /home/gradle/.gradle\n        env:\n        - name: GIT_BRANCHES\n          value: {{git_branches}}\n        - name: GIT_URL\n          value: "{{git_url}}"\n        - name: BUILD_PATH\n          value: {{build_path}}\n        - name: BUILD_TASK\n          value: {{build_task}}\n        - name: BUILD_DEST\n          value: {{build_dest}}\n        - name: JMX_PORT\n          value: "{{jmx_port}}"\n        - name: SERVER_PORT\n          value: "{{server_port}}"\n        - name: DOCKER_REGISTRY\n          value: "{{docker_registry}}"\n        - name: REPOSITORY\n          value: {{repository}}\n        - name: BUILD_VERSION\n          value: {{version}}\n        - name: VERSION_ID\n          value: "{{version_id}}"\n        - name: BUILD_NO\n          value: "{{build_no}}"\n        - name: DEPLOY_SERVER\n          value: "10.79.186.29:8062"\n        - name: USER_TOKEN\n          value: "{{user_token}}"\n      restartPolicy: Never\n  backoffLimit: 0\n  activeDeadlineSeconds: {{active}}\n  ttlSecondsAfterFinished: {{ttl}}', 'publish.yml', 28);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (83, '#!/bin/bash\ncd $(dirname $0)\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 29);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (84, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除旧部署文件\n      file: path=/home/op/{{apptag}}/ state=absent\n      become: yes\n', 'operation.yml', 29);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (86, 'admin  unicornAdmin\nuser  unicorn', 'jmx.password', 28);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (87, '#!/bin/bash\n\nAPP_OUT="$HOME"/startup.log\ntouch $APP_OUT\necho "==== Start app: $(date -Iseconds) ====" >> "$APP_OUT"\njar_file() {\n	echo `ls -t $APP_HOME/*.jar 2>/dev/null | head -1`\n}\nJAR_FILE=$(jar_file)\n\nif [ -z $JAR_FILE ]; then\n	echo \'No jar file in APP_HOME: $APP_HOME\' > "$APP_OUT"\nelse\n    JAVA_OPTS="-server {{exec_opt}}"\n    JAVA_OPTS="$JAVA_OPTS -XX:+UseG1GC -XX:+PrintClassHistogram -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCDetails"\n    JAVA_OPTS="$JAVA_OPTS -Xloggc:$HOME/gc.log"\n    JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.ssl=false"\n    JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.port={{jmx_port}} -Dcom.sun.management.jmxremote.rmi.port={{jmx_port}}"\n    JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.password.file=$HOME/jmx.password -Dcom.sun.management.jmxremote.access.file=$HOME/jmx.access"\n\n    echo "Using APP_HOME:   $APP_HOME"  >> "$APP_OUT"\n    echo "Using JAVA_HOME:  $JAVA_HOME" >> "$APP_OUT"\n    echo "Using JAR_FILE:   $JAR_FILE"  >> "$APP_OUT"\n    echo "Using JAVA_OPTS:  $JAVA_OPTS" >> "$APP_OUT"\n    \n    java $JAVA_OPTS -jar $JAR_FILE\nfi', 'startup.sh', 28);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (88, 'user   readonly\nadmin  readwrite \\\n              create javax.management.monitor.*,javax.management.timer.* \\\n              unregister\n', 'jmx.access', 28);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (92, 'resources:\n  - publish.yml\nconfigMapGenerator:\n- name: publish-config\n  files:\n  - startup.sh\n  - jmx.password\n  - jmx.access', 'kustomization.yaml', 28);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (93, 'user   readonly\nadmin  readwrite \\\n              create javax.management.monitor.*,javax.management.timer.* \\\n              unregister\n', 'jmx.access', 31);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (94, 'admin  unicornAdmin\nuser  unicorn', 'jmx.password', 31);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (95, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nif [ -r "$PRGDIR/vars.sh" ]; then\n  . "$PRGDIR/vars.sh"\nfi\nexport JAVA_OPTS=\nset -o errexit \\\n    && ansible-playbook -i hosts operation.yml \\\n    && kube-api $cluster_name followJobLog publish-$apptag-$version "BUILD SUCCESSFUL in \\d+"\\\n    && ansible-playbook -i hosts deploy-operation.yml \\\n    && groovy delete-image.groovy', 'play.sh', 31);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (96, 'apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: publish-{{apptag}}-{{version}}\nspec:\n  template:\n    spec:\n      securityContext:\n        runAsUser: 1000\n        runAsGroup: 1000\n      volumes:\n      - name: sock\n        hostPath:\n            path: /var/run/docker.sock\n      - name: gradle\n        hostPath:\n            path: /opt/gradle\n      - name: publish\n        configMap:\n            name: publish-config\n            defaultMode: 256\n            items:\n            - key: startup.sh\n              path: startup.sh\n            - key: jmx.password\n              path: jmx.password\n            - key: jmx.access\n              path: jmx.access\n      containers:\n      - name: publish\n        image: {{docker_registry}}/tq/publish:java\n        volumeMounts:\n        - name: sock\n          mountPath: /var/run/docker.sock\n        - name: publish\n          mountPath: /home/gradle/publish\n        - name: gradle\n          mountPath: /home/gradle/.gradle\n        env:\n        - name: GIT_BRANCHES\n          value: {{git_branches}}\n        - name: GIT_URL\n          value: "{{git_url}}"\n        - name: BUILD_PATH\n          value: {{build_path}}\n        - name: BUILD_TASK\n          value: {{build_task}}\n        - name: BUILD_DEST\n          value: {{build_dest}}\n        - name: JMX_PORT\n          value: "{{jmx_port}}"\n        - name: SERVER_PORT\n          value: "{{server_port}}"\n        - name: DOCKER_REGISTRY\n          value: "{{docker_registry}}"\n        - name: REPOSITORY\n          value: {{repository}}\n        - name: BUILD_VERSION\n          value: {{version}}\n        - name: VERSION_ID\n          value: "{{version_id}}"\n        - name: BUILD_NO\n          value: "{{build_no}}"\n        - name: DEPLOY_SERVER\n          value: "10.79.186.29:8062"\n        - name: USER_TOKEN\n          value: "{{user_token}}"\n      restartPolicy: Never\n  backoffLimit: 0\n  activeDeadlineSeconds: {{active}}\n  ttlSecondsAfterFinished: {{ttl}}', 'publish.yml', 31);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (97, '#!/bin/bash\n\nAPP_OUT="$HOME"/startup.log\ntouch $APP_OUT\necho "==== Start app: $(date -Iseconds) ====" >> "$APP_OUT"\njar_file() {\n	echo `ls -t $APP_HOME/*.jar 2>/dev/null | head -1`\n}\nJAR_FILE=$(jar_file)\n\nif [ -z $JAR_FILE ]; then\n	echo \'No jar file in APP_HOME: $APP_HOME\' > "$APP_OUT"\nelse\n    JAVA_OPTS="-server {{exec_opt}}"\n    JAVA_OPTS="$JAVA_OPTS -XX:+UseG1GC -XX:+PrintClassHistogram -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCDetails"\n    JAVA_OPTS="$JAVA_OPTS -Xloggc:$HOME/gc.log"\n    JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.ssl=false"\n    JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.port={{jmx_port}} -Dcom.sun.management.jmxremote.rmi.port={{jmx_port}}"\n    JAVA_OPTS="$JAVA_OPTS -Dcom.sun.management.jmxremote.password.file=$HOME/jmx.password -Dcom.sun.management.jmxremote.access.file=$HOME/jmx.access"\n\n    echo "Using APP_HOME:   $APP_HOME"  >> "$APP_OUT"\n    echo "Using JAVA_HOME:  $JAVA_HOME" >> "$APP_OUT"\n    echo "Using JAR_FILE:   $JAR_FILE"  >> "$APP_OUT"\n    echo "Using JAVA_OPTS:  $JAVA_OPTS" >> "$APP_OUT"\n    \n    java $JAVA_OPTS -jar $JAR_FILE\nfi', 'startup.sh', 31);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (98, 'resources:\n  - publish.yml\nconfigMapGenerator:\n- name: publish-config\n  files:\n  - startup.sh\n  - jmx.password\n  - jmx.access', 'kustomization.yaml', 31);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (99, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除旧部署文件\n      file: path=/home/op/{{apptag}}/ state=absent\n      become: yes\n\n    - name: 创建目录\n      file: path=\'/home/op/{{apptag}}\' state=directory mode=0755\n      become: yes\n      become_user: "op"\n\n    - name: 使用模版配置部署脚本\n      template: src=publish.yml dest=/home/op/{{apptag}}/\n      become: yes\n      become_user: "op"\n\n    - name: 删除最近一次构建任务\n      command: chdir=/home/op/{{apptag}} kubectl delete jobs/publish-{{apptag}}-{{version}}\n      become: true\n      become_user: "op"\n      register: deleteJob\n      ignore_errors: yes\n\n    - name: 显示构建任务删除结果\n      debug:\n        msg: "{{ deleteJob.stdout }}"\n\n    - name: 配置启动进程脚本\n      template: src=startup.sh dest=/home/op/{{apptag}}/startup.sh mode=0755\n      become: yes\n      become_user: "op"\n\n    - name: 配置 jmx 访问权限\n      template: src=jmx.access dest=/home/op/{{apptag}}/jmx.access mode=0400\n      become: yes\n      become_user: "op"\n\n    - name: 配置 jmx 账号密码\n      template: src=jmx.password dest=/home/op/{{apptag}}/jmx.password mode=0400\n      become: yes\n      become_user: "op"\n\n    - name: 生成kustomization.yaml\n      template: src=kustomization.yaml dest=/home/op/{{apptag}}/kustomization.yaml\n      become: yes\n      become_user: "op"\n\n    - name: 生成部署映像\n      command: chdir=/home/op/{{apptag}} kubectl apply -k ./\n      become: true\n      become_user: "op"\n      register: apply\n\n    - name: 显示映像生成结果\n      debug:\n        msg: "{{ apply.stdout }}"\n\n    - name: 等待10秒\n      wait_for: \'timeout=10\'\n      delegate_to: localhost\n', 'operation.yml', 31);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (100, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除旧部署文件\n      file: path=/home/op/{{apptag}}-{{version}}/ state=absent\n      become: yes\n\n    - name: 创建目录\n      file: path=\'/home/op/{{apptag}}-{{version}}\' state=directory mode=0755\n      become: yes\n      become_user: "op"\n\n    - name: 使用模版配置部署脚本\n      template: src=deployment.yml dest=/home/op/{{apptag}}-{{version}}/\n      become: yes\n      become_user: "op"\n\n    - name: 执行deployment.yml\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl apply -f deployment.yml\n      become: true\n      become_user: "op"\n      register: deployment\n\n    - name: 显示执行结果\n      debug:\n        msg: "{{ deployment.stdout }}"\n\n    - name: 使用模版配置暴露服务脚本\n      template: src=service.yml dest=/home/op/{{apptag}}-{{version}}/\n      become: yes\n      become_user: "op"\n\n    - name: 执行service.yml\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl apply -f service.yml\n      become: true\n      become_user: "op"\n      register: service\n      when: "{{ expose_service }}"\n\n    - name: 显示执行结果\n      debug:\n        msg: "{{ service.stdout }}"\n      when: "{{ expose_service }}"\n\n    - name: 使用模版配置Ingress脚本\n      template: src=ingress.yml dest=/home/op/{{apptag}}-{{version}}/\n      become: yes\n      become_user: "op"\n\n    - name: 执行ingress.yml\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl apply -f ingress.yml\n      become: true\n      become_user: "op"\n      register: ingress\n      when: "{{ expose_service }}"\n\n    - name: 显示执行结果\n      debug:\n        msg: "{{ ingress.stdout }}"\n      when: "{{ expose_service }}"\n\n    - name: 更新最近用于部署的构建号\n      uri:\n        url: http://10.79.186.29:8062/api/versions/{{version_id}}/deploy?token={{user_token}}&buildno={{build_no}}\n        method: PUT\n        body: "{{user_token}}"\n      when: "\'configured\' in deployment.stdout or \'created\' in deployment.stdout"\n\n- hosts: all_targets\n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除旧Docker映像\n      shell: docker image rm {{docker_registry}}/{{repository}}:{{version}}-b`echo $(({{build_no}}-3))`\n      become: true\n      become_user: "op"\n      ignore_errors: yes', 'deploy-operation.yml', 31);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (101, 'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{apptag}}-{{version}}\nspec:\n  replicas: {{replicas}}\n  selector:\n    matchLabels:\n      app: {{apptag}}\n      version: {{version}}\n  minReadySeconds: {{min_ready_seconds}}\n  template:\n    metadata:\n      labels:\n        app: {{apptag}}\n        version: {{version}}\n    spec:\n      securityContext:\n        runAsUser: 1000\n        runAsGroup: 1000\n      hostNetwork: {{host_network}}\n      containers:\n      - name: {{apptag}}\n        image: {{docker_registry}}/{{repository}}:{{version}}-b{{build_no}}\n        ports:\n        - containerPort: {{server_port}}\n          name: server\n        - containerPort: {{jmx_port}}\n          name: jmx\n        resources:\n          requests:\n            memory: "{{request_memory}}"\n            cpu: "{{request_cpu}}"\n            ephemeral-storage: "{{request_eph_storage}}"\n          limits:\n            memory: "{{limit_memory}}"\n            cpu: "{{limit_cpu}}"\n            ephemeral-storage: "{{limit_ephemeral_storage}}"', 'deployment.yml', 31);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (103, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nif [ -r "$PRGDIR/vars.sh" ]; then\n  . "$PRGDIR/vars.sh"\nfi\nexport JAVA_OPTS=\nkube-api $cluster_name getPodLogByLabel app=$apptag,version=$version $op_limit_bytes $op_since_time $tail_lines 5 && echo " " && echo "@@SET_HOST_STATUS ALL,成功,running,"', 'play.sh', 33);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (104, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nif [ -r "$PRGDIR/vars.sh" ]; then\n  . "$PRGDIR/vars.sh"\nfi\nexport JAVA_OPTS=\nkube-api $cluster_name listPodsByLabel app=$apptag,version=$version && echo " " && echo "@@SET_HOST_STATUS ALL,成功,running,"', 'play.sh', 34);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (105, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除旧部署文件\n      file: path=/home/op/{{apptag}}-{{version}}/ state=absent\n      become: yes\n\n    - name: 创建目录\n      file: path=\'/home/op/{{apptag}}-{{version}}\' state=directory mode=0755\n      become: yes\n      become_user: "op"\n\n    - name: 使用模版配置部署脚本\n      template: src=publish.yml dest=/home/op/{{apptag}}-{{version}}/\n      become: yes\n      become_user: "op"\n\n    - name: 删除最近一次构建任务\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl delete jobs/publish-{{apptag}}-{{version}}\n      become: true\n      become_user: "op"\n      register: deleteJob\n      ignore_errors: yes\n\n    - name: 显示构建任务删除结果\n      debug:\n        msg: "{{ deleteJob.stdout }}"\n\n    - name: 生成环境变量脚本\n      template: src=setenv.sh dest=/home/op/{{apptag}}-{{version}}/setenv.sh mode=0755\n      become: yes\n      become_user: "op"\n\n    - name: 生成服务配置文件\n      template: src=server.xml dest=/home/op/{{apptag}}-{{version}}/server.xml mode=0644\n      become: yes\n      become_user: "op"\n\n    - name: 配置 jmx 访问权限\n      template: src=jmx.access dest=/home/op/{{apptag}}-{{version}}/jmx.access mode=0400\n      become: yes\n      become_user: "op"\n\n    - name: 配置 jmx 账号密码\n      template: src=jmx.password dest=/home/op/{{apptag}}-{{version}}/jmx.password mode=0400\n      become: yes\n      become_user: "op"\n\n    - name: 生成kustomization.yaml\n      template: src=kustomization.yaml dest=/home/op/{{apptag}}-{{version}}/kustomization.yaml\n      become: yes\n      become_user: "op"\n\n    - name: 生成部署映像\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl apply -k ./\n      become: true\n      become_user: "op"\n      register: apply\n\n    - name: 显示映像生成结果\n      debug:\n        msg: "{{ apply.stdout }}"\n\n    - name: 等待5秒\n      wait_for: \'timeout=5\'\n      delegate_to: localhost\n', 'operation.yml', 35);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (106, '#!/bin/bash\n\nAPP_OUT="$APP_HOME"/logs/startup.log\ntouch $APP_OUT\necho "==== Start app: $(date -Iseconds) ====" >> "$APP_OUT"\n\nCATALINA_OPTS="-server {{exec_opt}}"\nCATALINA_OPTS="$CATALINA_OPTS -XX:+UseG1GC -XX:+PrintClassHistogram -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCDetails"\nCATALINA_OPTS="$CATALINA_OPTS -Xloggc:$APP_HOME/logs/gc.log"\nCATALINA_OPTS="$CATALINA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.ssl=false"\nCATALINA_OPTS="$CATALINA_OPTS -Dcom.sun.management.jmxremote.port={{jmx_port}} -Dcom.sun.management.jmxremote.rmi.port={{jmx_port}}"\nCATALINA_OPTS="$CATALINA_OPTS -Dcom.sun.management.jmxremote.password.file=$APP_HOME/bin/jmx.password -Dcom.sun.management.jmxremote.access.file=$APP_HOME/bin/jmx.access"\n\necho "Using APP_HOME:   $APP_HOME"  >> "$APP_OUT"\necho "Using JAVA_HOME:  $JAVA_HOME" >> "$APP_OUT"\necho "Using JAR_FILE:   $JAR_FILE"  >> "$APP_OUT"\necho "Using SERVER_PORT: $SERVER_PORT" >> "$APP_OUT"\necho "Using CATALINA_OPTS:  $CATALINA_OPTS" >> "$APP_OUT"\n\nexport CATALINA_OPTS\nexport LANG=en_US.UTF-8', 'setenv.sh', 35);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (107, 'resources:\n  - publish.yml\nconfigMapGenerator:\n- name: publish-config\n  files:\n  - setenv.sh\n  - server.xml\n  - jmx.password\n  - jmx.access', 'kustomization.yaml', 35);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (108, '<?xml version=\'1.0\' encoding=\'utf-8\'?>\n<Server port="4561" shutdown="SHUTDOWN">\n  <Listener className="org.apache.catalina.startup.VersionLoggerListener" />\n  <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />\n  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />\n  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />\n  <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />\n  <Service name="Catalina">\n    <Executor name="tomcatThreadPool" namePrefix="catalina-exec-" maxThreads="{{ max_threads }}" minSpareThreads="{{ min_threads }}"/>   \n    <Connector port="{{ http_port }}" protocol="HTTP/1.1"\n               connectionTimeout="10000"\n               executor="tomcatThreadPool"\n               acceptorThreadCount="2"\n               acceptCount="1024"\n               processorCache="6000"\n               compression="on"\n               compressionMinSize="1024"\n               compressableMimeType="text/html,text/xml,text/javascript,text/css,text/plain,application/json"\n               redirectPort="{{ https_port }}" />\n\n    <Connector port="4562" protocol="AJP/1.3" redirectPort="{{ https_port }}" />\n    <Engine name="Catalina" defaultHost="localhost">\n      <Host name="localhost"  appBase="webapps/app" unpackWARs="false" autoDeploy="false">\n        <Context path="" docBase=""  reloadable="true" caseSensitive="false" debug="0"></Context>\n      </Host>\n    </Engine>\n  </Service>\n</Server>', 'server.xml', 35);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (109, 'user   readonly\nadmin  readwrite \\\n              create javax.management.monitor.*,javax.management.timer.* \\\n              unregister\n', 'jmx.access', 35);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (110, 'apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: publish-{{apptag}}-{{version}}\nspec:\n  template:\n    spec:\n      securityContext:\n        runAsUser: 1000\n        runAsGroup: 1000\n      volumes:\n      - name: sock\n        hostPath:\n            path: /var/run/docker.sock\n      - name: gradle\n        hostPath:\n            path: /opt/gradle\n      - name: publish\n        configMap:\n            name: publish-config\n            defaultMode: 256\n            items:\n            - key: setenv.sh\n              path: setenv.sh\n            - key: jmx.password\n              path: jmx.password\n            - key: jmx.access\n              path: jmx.access\n            - key: server.xml\n              path: server.xml\n      containers:\n      - name: publish\n        image: {{docker_registry}}/tq/publish:tomcat\n        volumeMounts:\n        - name: sock\n          mountPath: /var/run/docker.sock\n        - name: publish\n          mountPath: /home/gradle/publish\n        - name: gradle\n          mountPath: /home/gradle/.gradle\n        env:\n        - name: GIT_BRANCHES\n          value: {{git_branches}}\n        - name: GIT_URL\n          value: "{{git_url}}"\n        - name: BUILD_PATH\n          value: {{build_path}}\n        - name: BUILD_TASK\n          value: {{build_task}}\n        - name: BUILD_DEST\n          value: {{build_dest}}\n        - name: DOCKER_REGISTRY\n          value: "{{docker_registry}}"\n        - name: REPOSITORY\n          value: {{repository}}\n        - name: BUILD_VERSION\n          value: {{version}}\n        - name: VERSION_ID\n          value: "{{version_id}}"\n        - name: BUILD_NO\n          value: "{{build_no}}"\n        - name: DEPLOY_SERVER\n          value: "10.79.186.29:8062"\n        - name: USER_TOKEN\n          value: "{{user_token}}"\n      restartPolicy: Never\n  backoffLimit: 0\n  activeDeadlineSeconds: {{active}}\n  ttlSecondsAfterFinished: {{ttl}}', 'publish.yml', 35);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (111, 'admin  unicornAdmin\nuser  unicorn', 'jmx.password', 35);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (112, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\n\nansible-playbook -i hosts operation.yml\n\nif [ -r "$PRGDIR/vars.sh" ]; then\n  . "$PRGDIR/vars.sh"\nfi\nexport JAVA_OPTS=\nkube-api $cluster_name followJobLog publish-$apptag-$version', 'play.sh', 35);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (113, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nif [ -r "$PRGDIR/vars.sh" ]; then\n  . "$PRGDIR/vars.sh"\nfi\nexport JAVA_OPTS=\nset -o errexit \\\n    && ansible-playbook -i hosts operation.yml \\\n    && groovy delete-image.groovy', 'play.sh', 36);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (114, 'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{apptag}}-{{version}}\nspec:\n  replicas: {{replicas}}\n  selector:\n    matchLabels:\n      app: {{apptag}}\n      version: {{version}}\n  minReadySeconds: {{min_ready_seconds}}\n  template:\n    metadata:\n      labels:\n        app: {{apptag}}\n        version: {{version}}\n    spec:\n      securityContext:\n        runAsUser: 1000\n        runAsGroup: 1000\n      hostNetwork: {{host_network}}\n      containers:\n      - name: {{apptag}}\n        image: {{docker_registry}}/{{repository}}:{{version}}-b{{build_no}}\n        ports:\n        - containerPort: {{http_port}}\n          name: http\n        - containerPort: {{jmx_port}}\n          name: jmx\n        resources:\n          requests:\n            memory: "{{request_memory}}"\n            cpu: "{{request_cpu}}"\n            ephemeral-storage: "{{request_eph_storage}}"\n          limits:\n            memory: "{{limit_memory}}"\n            cpu: "{{limit_cpu}}"\n            ephemeral-storage: "{{limit_ephemeral_storage}}"', 'deployment.yml', 36);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (115, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除旧部署文件\n      file: path=/home/op/{{apptag}}-{{version}}/ state=absent\n      become: yes\n\n    - name: 创建目录\n      file: path=\'/home/op/{{apptag}}-{{version}}\' state=directory mode=0755\n      become: yes\n      become_user: "op"\n\n    - name: 使用模版配置部署脚本\n      template: src=deployment.yml dest=/home/op/{{apptag}}-{{version}}/\n      become: yes\n      become_user: "op"\n\n    - name: 执行deployment.yml\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl apply -f deployment.yml\n      become: true\n      become_user: "op"\n      register: deployment\n\n    - name: 显示执行结果\n      debug:\n        msg: "{{ deployment.stdout }}"\n\n    - name: 使用模版配置暴露服务脚本\n      template: src=service.yml dest=/home/op/{{apptag}}-{{version}}/\n      become: yes\n      become_user: "op"\n\n    - name: 执行service.yml\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl apply -f service.yml\n      become: true\n      become_user: "op"\n      register: service\n      when: "{{ expose_service }}"\n\n    - name: 显示执行结果\n      debug:\n        msg: "{{ service.stdout }}"\n      when: "{{ expose_service }}"\n\n    - name: 使用模版配置Ingress脚本\n      template: src=ingress.yml dest=/home/op/{{apptag}}-{{version}}/\n      become: yes\n      become_user: "op"\n\n    - name: 执行ingress.yml\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl apply -f ingress.yml\n      become: true\n      become_user: "op"\n      register: ingress\n      when: "{{ expose_service }}"\n\n    - name: 显示执行结果\n      debug:\n        msg: "{{ ingress.stdout }}"\n      when: "{{ expose_service }}"\n\n    - name: 更新最近用于部署的构建号\n      uri:\n        url: http://10.79.186.29:8062/api/versions/{{version_id}}/deploy?token={{user_token}}&buildno={{build_no}}\n        method: PUT\n        body: "{{user_token}}"\n      when: "\'configured\' in deployment.stdout or \'created\' in deployment.stdout"\n\n- hosts: all_targets\n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除旧Docker映像\n      shell: docker image rm {{docker_registry}}/{{repository}}:{{version}}-b`echo $(({{build_no}}-3))`\n      become: true\n      become_user: "op"\n      ignore_errors: yes\n', 'operation.yml', 36);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (116, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nif [ -r "$PRGDIR/vars.sh" ]; then\n  . "$PRGDIR/vars.sh"\nfi\nexport JAVA_OPTS=\nkube-api $cluster_name listPodsByLabel app=$apptag,version=$version && echo " " && echo "@@SET_HOST_STATUS ALL,成功,running,"', 'play.sh', 37);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (117, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nif [ -r "$PRGDIR/vars.sh" ]; then\n  . "$PRGDIR/vars.sh"\nfi\nexport JAVA_OPTS=\nkube-api $cluster_name getPodLogByLabel app=$apptag,version=$version $op_limit_bytes $op_since_time $tail_lines 5 && echo " " && echo "@@SET_HOST_STATUS ALL,成功,running,"', 'play.sh', 38);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (118, 'apiVersion: v1\nkind: Service\nmetadata:\n  name: {{apptag}}-{{version}}\nspec:\n  type: NodePort\n  selector:\n    app: {{apptag}}\n    version: {{version}}\n  ports:\n    - name: server\n      protocol: TCP\n      port: {{server_port}}\n      targetPort: {{server_port}}', 'service.yml', 27);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (119, 'apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: {{apptag}}-{{version}}\n  annotations:\n    haproxy.org/ssl-redirect: "false"\nspec:\n  tls:\n  - hosts:\n    - {{ingress_domain}}\n    secretName: {{ingress_domain}}\n  rules:\n  - host: {{ingress_domain}}\n    http:\n      paths:\n      - pathType: Prefix\n        path: "{{ingress_path}}"\n        backend:\n          service:\n            name: {{apptag}}-{{version}}\n            port:\n              number: {{http_port}}', 'ingress.yml', 36);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (120, 'apiVersion: v1\nkind: Service\nmetadata:\n  name: {{apptag}}-{{version}}\nspec:\n  type: ClusterIP\n  selector:\n    app: {{apptag}}\n    version: {{version}}\n  ports:\n    - name: server\n      protocol: TCP\n      port: {{http_port}}\n      targetPort: {{http_port}}', 'service.yml', 36);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (121, 'apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: {{apptag}}-{{version}}\n  annotations:\n    haproxy.org/ssl-redirect: "false"\nspec:\n  tls:\n  - hosts:\n    - {{ingress_domain}}\n    secretName: tq-felink-secret-tls\n  rules:\n  - host: {{ingress_domain}}\n    http:\n      paths:\n      - pathType: Prefix\n        path: "{{ingress_path}}"\n        backend:\n          service:\n            name: {{apptag}}-{{version}}\n            port:\n              number: {{server_port}}\n', 'ingress.yml', 27);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (122, 'user   readonly\nadmin  readwrite \\\n              create javax.management.monitor.*,javax.management.timer.* \\\n              unregister\n', 'jmx.access', 39);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (123, 'apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: publish-{{apptag}}-{{version}}\nspec:\n  template:\n    spec:\n      securityContext:\n        runAsUser: 1000\n        runAsGroup: 1000\n      volumes:\n      - name: sock\n        hostPath:\n            path: /var/run/docker.sock\n      - name: gradle\n        hostPath:\n            path: /opt/gradle\n      - name: publish\n        configMap:\n            name: publish-config\n            defaultMode: 256\n            items:\n            - key: setenv.sh\n              path: setenv.sh\n            - key: jmx.password\n              path: jmx.password\n            - key: jmx.access\n              path: jmx.access\n            - key: server.xml\n              path: server.xml\n      containers:\n      - name: publish\n        image: {{docker_registry}}/tq/publish:tomcat\n        volumeMounts:\n        - name: sock\n          mountPath: /var/run/docker.sock\n        - name: publish\n          mountPath: /home/gradle/publish\n        - name: gradle\n          mountPath: /home/gradle/.gradle\n        env:\n        - name: GIT_BRANCHES\n          value: {{git_branches}}\n        - name: GIT_URL\n          value: "{{git_url}}"\n        - name: BUILD_PATH\n          value: {{build_path}}\n        - name: BUILD_TASK\n          value: {{build_task}}\n        - name: BUILD_DEST\n          value: {{build_dest}}\n        - name: DOCKER_REGISTRY\n          value: "{{docker_registry}}"\n        - name: REPOSITORY\n          value: {{repository}}\n        - name: BUILD_VERSION\n          value: {{version}}\n        - name: VERSION_ID\n          value: "{{version_id}}"\n        - name: BUILD_NO\n          value: "{{build_no}}"\n        - name: DEPLOY_SERVER\n          value: "10.79.186.29:8062"\n        - name: USER_TOKEN\n          value: "{{user_token}}"\n      restartPolicy: Never\n  backoffLimit: 0\n  activeDeadlineSeconds: {{active}}\n  ttlSecondsAfterFinished: {{ttl}}', 'publish.yml', 39);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (124, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nif [ -r "$PRGDIR/vars.sh" ]; then\n  . "$PRGDIR/vars.sh"\nfi\nexport JAVA_OPTS=\nset -o errexit \\\n    && ansible-playbook -i hosts operation.yml \\\n    && kube-api $cluster_name followJobLog publish-$apptag-$version "BUILD SUCCESSFUL in \\d+"\\\n    && ansible-playbook -i hosts deploy-operation.yml \\\n    && groovy delete-image.groovy', 'play.sh', 39);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (125, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除旧部署文件\n      file: path=/home/op/{{apptag}}-{{version}}/ state=absent\n      become: yes\n\n    - name: 创建目录\n      file: path=\'/home/op/{{apptag}}-{{version}}\' state=directory mode=0755\n      become: yes\n      become_user: "op"\n\n    - name: 使用模版配置部署脚本\n      template: src=publish.yml dest=/home/op/{{apptag}}-{{version}}/\n      become: yes\n      become_user: "op"\n\n    - name: 删除最近一次构建任务\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl delete jobs/publish-{{apptag}}-{{version}}\n      become: true\n      become_user: "op"\n      register: deleteJob\n      ignore_errors: yes\n\n    - name: 显示构建任务删除结果\n      debug:\n        msg: "{{ deleteJob.stdout }}"\n\n    - name: 生成环境变量脚本\n      template: src=setenv.sh dest=/home/op/{{apptag}}-{{version}}/setenv.sh mode=0755\n      become: yes\n      become_user: "op"\n\n    - name: 生成服务配置文件\n      template: src=server.xml dest=/home/op/{{apptag}}-{{version}}/server.xml mode=0644\n      become: yes\n      become_user: "op"\n\n    - name: 配置 jmx 访问权限\n      template: src=jmx.access dest=/home/op/{{apptag}}-{{version}}/jmx.access mode=0400\n      become: yes\n      become_user: "op"\n\n    - name: 配置 jmx 账号密码\n      template: src=jmx.password dest=/home/op/{{apptag}}-{{version}}/jmx.password mode=0400\n      become: yes\n      become_user: "op"\n\n    - name: 生成kustomization.yaml\n      template: src=kustomization.yaml dest=/home/op/{{apptag}}-{{version}}/kustomization.yaml\n      become: yes\n      become_user: "op"\n\n    - name: 生成部署映像\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl apply -k ./\n      become: true\n      become_user: "op"\n      register: apply\n\n    - name: 显示映像生成结果\n      debug:\n        msg: "{{ apply.stdout }}"\n\n    - name: 等待5秒\n      wait_for: \'timeout=5\'\n      delegate_to: localhost\n', 'operation.yml', 39);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (126, 'admin  unicornAdmin\nuser  unicorn', 'jmx.password', 39);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (127, 'resources:\n  - publish.yml\nconfigMapGenerator:\n- name: publish-config\n  files:\n  - setenv.sh\n  - server.xml\n  - jmx.password\n  - jmx.access', 'kustomization.yaml', 39);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (128, '<?xml version=\'1.0\' encoding=\'utf-8\'?>\n<Server port="4561" shutdown="SHUTDOWN">\n  <Listener className="org.apache.catalina.startup.VersionLoggerListener" />\n  <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />\n  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />\n  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />\n  <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />\n  <Service name="Catalina">\n    <Executor name="tomcatThreadPool" namePrefix="catalina-exec-" maxThreads="{{ max_threads }}" minSpareThreads="{{ min_threads }}"/>   \n    <Connector port="{{ http_port }}" protocol="HTTP/1.1"\n               connectionTimeout="10000"\n               executor="tomcatThreadPool"\n               acceptorThreadCount="2"\n               acceptCount="1024"\n               processorCache="6000"\n               compression="on"\n               compressionMinSize="1024"\n               compressableMimeType="text/html,text/xml,text/javascript,text/css,text/plain,application/json"\n               redirectPort="{{ https_port }}" />\n\n    <Connector port="4562" protocol="AJP/1.3" redirectPort="{{ https_port }}" />\n    <Engine name="Catalina" defaultHost="localhost">\n      <Host name="localhost"  appBase="webapps/app" unpackWARs="false" autoDeploy="false">\n        <Context path="" docBase=""  reloadable="true" caseSensitive="false" debug="0"></Context>\n      </Host>\n    </Engine>\n  </Service>\n</Server>', 'server.xml', 39);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (129, '#!/bin/bash\n\nAPP_OUT="$APP_HOME"/logs/startup.log\ntouch $APP_OUT\necho "==== Start app: $(date -Iseconds) ====" >> "$APP_OUT"\n\nCATALINA_OPTS="-server {{exec_opt}}"\nCATALINA_OPTS="$CATALINA_OPTS -XX:+UseG1GC -XX:+PrintClassHistogram -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCDetails"\nCATALINA_OPTS="$CATALINA_OPTS -Xloggc:$APP_HOME/logs/gc.log"\nCATALINA_OPTS="$CATALINA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.ssl=false"\nCATALINA_OPTS="$CATALINA_OPTS -Dcom.sun.management.jmxremote.port={{jmx_port}} -Dcom.sun.management.jmxremote.rmi.port={{jmx_port}}"\nCATALINA_OPTS="$CATALINA_OPTS -Dcom.sun.management.jmxremote.password.file=$APP_HOME/bin/jmx.password -Dcom.sun.management.jmxremote.access.file=$APP_HOME/bin/jmx.access"\n\necho "Using APP_HOME:   $APP_HOME"  >> "$APP_OUT"\necho "Using JAVA_HOME:  $JAVA_HOME" >> "$APP_OUT"\necho "Using JAR_FILE:   $JAR_FILE"  >> "$APP_OUT"\necho "Using SERVER_PORT: $SERVER_PORT" >> "$APP_OUT"\necho "Using CATALINA_OPTS:  $CATALINA_OPTS" >> "$APP_OUT"\n\nexport CATALINA_OPTS\nexport LANG=en_US.UTF-8', 'setenv.sh', 39);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (130, 'apiVersion: v1\nkind: Service\nmetadata:\n  name: {{apptag}}-{{version}}\nspec:\n  type: ClusterIP\n  selector:\n    app: {{apptag}}\n    version: {{version}}\n  ports:\n    - name: server\n      protocol: TCP\n      port: {{http_port}}\n      targetPort: {{http_port}}', 'service.yml', 39);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (131, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除旧部署文件\n      file: path=/home/op/{{apptag}}-{{version}}/ state=absent\n      become: yes\n\n    - name: 创建目录\n      file: path=\'/home/op/{{apptag}}-{{version}}\' state=directory mode=0755\n      become: yes\n      become_user: "op"\n\n    - name: 使用模版配置部署脚本\n      template: src=deployment.yml dest=/home/op/{{apptag}}-{{version}}/\n      become: yes\n      become_user: "op"\n\n    - name: 执行deployment.yml\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl apply -f deployment.yml\n      become: true\n      become_user: "op"\n      register: deployment\n\n    - name: 显示执行结果\n      debug:\n        msg: "{{ deployment.stdout }}"\n\n    - name: 使用模版配置暴露服务脚本\n      template: src=service.yml dest=/home/op/{{apptag}}-{{version}}/\n      become: yes\n      become_user: "op"\n\n    - name: 执行service.yml\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl apply -f service.yml\n      become: true\n      become_user: "op"\n      register: service\n      when: "{{ expose_service }}"\n\n    - name: 显示执行结果\n      debug:\n        msg: "{{ service.stdout }}"\n      when: "{{ expose_service }}"\n\n    - name: 使用模版配置Ingress脚本\n      template: src=ingress.yml dest=/home/op/{{apptag}}-{{version}}/\n      become: yes\n      become_user: "op"\n\n    - name: 执行ingress.yml\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl apply -f ingress.yml\n      become: true\n      become_user: "op"\n      register: ingress\n      when: "{{ expose_service }}"\n\n    - name: 显示执行结果\n      debug:\n        msg: "{{ ingress.stdout }}"\n      when: "{{ expose_service }}"\n\n    - name: 更新最近用于部署的构建号\n      uri:\n        url: http://10.79.186.29:8062/api/versions/{{version_id}}/deploy?token={{user_token}}&buildno={{build_no}}\n        method: PUT\n        body: "{{user_token}}"\n      when: "\'configured\' in deployment.stdout or \'created\' in deployment.stdout"\n\n- hosts: all_targets\n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除旧Docker映像\n      shell: docker image rm {{docker_registry}}/{{repository}}:{{version}}-b`echo $(({{build_no}}-3))`\n      become: true\n      become_user: "op"\n      ignore_errors: yes\n', 'deploy-operation.yml', 39);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (132, 'apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: {{apptag}}-{{version}}\n  annotations:\n    haproxy.org/ssl-redirect: "false"\nspec:\n  tls:\n  - hosts:\n    - {{ingress_domain}}\n    secretName: tq-felink-secret-tls\n  rules:\n  - host: {{ingress_domain}}\n    http:\n      paths:\n      - pathType: Prefix\n        path: "{{ingress_path}}"\n        backend:\n          service:\n            name: {{apptag}}-{{version}}\n            port:\n              number: {{http_port}}', 'ingress.yml', 39);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (133, 'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{apptag}}-{{version}}\nspec:\n  replicas: {{replicas}}\n  selector:\n    matchLabels:\n      app: {{apptag}}\n      version: {{version}}\n  minReadySeconds: {{min_ready_seconds}}\n  template:\n    metadata:\n      labels:\n        app: {{apptag}}\n        version: {{version}}\n    spec:\n      securityContext:\n        runAsUser: 1000\n        runAsGroup: 1000\n      hostNetwork: {{host_network}}\n      containers:\n      - name: {{apptag}}\n        image: {{docker_registry}}/{{repository}}:{{version}}-b{{build_no}}\n        ports:\n        - containerPort: {{http_port}}\n          name: http\n        - containerPort: {{jmx_port}}\n          name: jmx\n        resources:\n          requests:\n            memory: "{{request_memory}}"\n            cpu: "{{request_cpu}}"\n            ephemeral-storage: "{{request_eph_storage}}"\n          limits:\n            memory: "{{limit_memory}}"\n            cpu: "{{limit_cpu}}"\n            ephemeral-storage: "{{limit_ephemeral_storage}}"', 'deployment.yml', 39);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (134, 'final addr = System.getenv(\'docker_registry\')\nfinal buildNo = Integer.parseInt(System.getenv(\'build_no\'))\nfinal oldNo = buildNo - 3\nfinal name = System.getenv(\'repository\')\nfinal version = System.getenv(\'version\')\nfinal tag = "${version}-b${oldNo}"\nprintln "Deleting docker image: $name:$tag from $addr"\ndef get  = (HttpURLConnection)new URL("http://$addr/v2/$name/manifests/$tag").openConnection()\nget.setRequestProperty(\'Accept\', \'application/vnd.docker.distribution.manifest.v2+json\')\nif (get.getResponseCode() == 200) {\n    def digest =  get.getHeaderField(\'Docker-Content-Digest\')\n    println "image digest: $digest"\n    def del = (HttpURLConnection)new URL("http://$addr/v2/$name/manifests/$digest").openConnection()\n    del.setRequestMethod(\'DELETE\')\n    if (del.getResponseCode() == 202) {\n        println \'delete accepted\'\n    } else {\n        println del.getInputStream().getText()\n    }\n} else {\n    println get.getInputStream().getText()\n}\n', 'delete-image.groovy', 27);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (135, 'final addr = System.getenv(\'docker_registry\')\nfinal buildNo = Integer.parseInt(System.getenv(\'build_no\'))\nfinal oldNo = buildNo - 3\nfinal name = System.getenv(\'repository\')\nfinal version = System.getenv(\'version\')\nfinal tag = "${version}-b${oldNo}"\nprintln "Deleting docker image: $name:$tag from $addr"\ndef get  = (HttpURLConnection)new URL("http://$addr/v2/$name/manifests/$tag").openConnection()\nget.setRequestProperty(\'Accept\', \'application/vnd.docker.distribution.manifest.v2+json\')\nif (get.getResponseCode() == 200) {\n    def digest =  get.getHeaderField(\'Docker-Content-Digest\')\n    println "image digest: $digest"\n    def del = (HttpURLConnection)new URL("http://$addr/v2/$name/manifests/$digest").openConnection()\n    del.setRequestMethod(\'DELETE\')\n    if (del.getResponseCode() == 202) {\n        println \'delete accepted\'\n    } else {\n        println del.getInputStream().getText()\n    }\n} else {\n    println get.getInputStream().getText()\n}\n', 'delete-image.groovy', 31);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (136, 'final addr = System.getenv(\'docker_registry\')\nfinal buildNo = Integer.parseInt(System.getenv(\'build_no\'))\nfinal oldNo = buildNo - 3\nfinal name = System.getenv(\'repository\')\nfinal version = System.getenv(\'version\')\nfinal tag = "${version}-b${oldNo}"\nprintln "Deleting docker image: $name:$tag from $addr"\ndef get  = (HttpURLConnection)new URL("http://$addr/v2/$name/manifests/$tag").openConnection()\nget.setRequestProperty(\'Accept\', \'application/vnd.docker.distribution.manifest.v2+json\')\nif (get.getResponseCode() == 200) {\n    def digest =  get.getHeaderField(\'Docker-Content-Digest\')\n    println "image digest: $digest"\n    def del = (HttpURLConnection)new URL("http://$addr/v2/$name/manifests/$digest").openConnection()\n    del.setRequestMethod(\'DELETE\')\n    if (del.getResponseCode() == 202) {\n        println \'delete accepted\'\n    } else {\n        println del.getInputStream().getText()\n    }\n} else {\n    println get.getInputStream().getText()\n}\n', 'delete-image.groovy', 36);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (137, 'final addr = System.getenv(\'docker_registry\')\nfinal buildNo = Integer.parseInt(System.getenv(\'build_no\'))\nfinal oldNo = buildNo - 3\nfinal name = System.getenv(\'repository\')\nfinal version = System.getenv(\'version\')\nfinal tag = "${version}-b${oldNo}"\nprintln "Deleting docker image: $name:$tag from $addr"\ndef get  = (HttpURLConnection)new URL("http://$addr/v2/$name/manifests/$tag").openConnection()\nget.setRequestProperty(\'Accept\', \'application/vnd.docker.distribution.manifest.v2+json\')\nif (get.getResponseCode() == 200) {\n    def digest =  get.getHeaderField(\'Docker-Content-Digest\')\n    println "image digest: $digest"\n    def del = (HttpURLConnection)new URL("http://$addr/v2/$name/manifests/$digest").openConnection()\n    del.setRequestMethod(\'DELETE\')\n    if (del.getResponseCode() == 202) {\n        println \'delete accepted\'\n    } else {\n        println del.getInputStream().getText()\n    }\n} else {\n    println get.getInputStream().getText()\n}\n', 'delete-image.groovy', 39);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (138, 'apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: {{apptag}}-{{version}}\n  annotations:\n    haproxy.org/ssl-redirect: "false"\nspec:\n  tls:\n  - hosts:\n    - {{ingress_domain}}\n    secretName: tq-felink-secret-tls\n  rules:\n  - host: {{ingress_domain}}\n    http:\n      paths:\n      - pathType: Prefix\n        path: "{{ingress_path}}"\n        backend:\n          service:\n            name: {{apptag}}-{{version}}\n            port:\n              number: {{server_port}}\n', 'ingress.yml', 31);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (139, 'apiVersion: v1\nkind: Service\nmetadata:\n  name: {{apptag}}-{{version}}\nspec:\n  type: NodePort\n  selector:\n    app: {{apptag}}\n    version: {{version}}\n  ports:\n    - name: server\n      protocol: TCP\n      port: {{server_port}}\n      targetPort: {{server_port}}', 'service.yml', 31);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (140, '[all_targets]\n172.17.149.10\n172.17.149.13\n', 'hosts', 27);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (141, '[all_targets]\n172.17.149.10\n172.17.149.13\n', 'hosts', 31);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (142, '[all_targets]\n172.17.149.10\n172.17.149.13\n', 'hosts', 36);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (143, '[all_targets]\n172.17.149.10\n172.17.149.13', 'hosts', 39);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (144, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除旧部署文件\n      file: path=/home/op/{{apptag}}-{{version}}/ state=absent\n      become: yes\n\n    - name: 创建目录\n      file: path=\'/home/op/{{apptag}}-{{version}}\' state=directory mode=0755\n      become: yes\n      become_user: "op"\n\n    - name: 使用模版配置部署脚本\n      template: src=build.yml dest=/home/op/{{apptag}}-{{version}}/\n      become: yes\n      become_user: "op"\n\n    - name: 删除最近一次构建任务\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl delete jobs/build-{{apptag}}-{{version}}\n      become: true\n      become_user: "op"\n      register: deleteJob\n      ignore_errors: yes\n\n    - name: 显示构建任务删除结果\n      debug:\n        msg: "{{ deleteJob.stdout }}"\n\n    - name: 启动构建节点\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl apply -f build.yml\n      become: true\n      become_user: "op"\n      register: apply\n\n    - name: 显示启动结果\n      debug:\n        msg: "{{ apply.stdout }}"\n\n    - name: 等待5秒\n      wait_for: \'timeout=5\'\n      delegate_to: localhost\n', 'operation.yml', 40);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (145, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\n\nansible-playbook -i hosts operation.yml\n\nif [ -r "$PRGDIR/vars.sh" ]; then\n  . "$PRGDIR/vars.sh"\nfi\nexport JAVA_OPTS=\nkube-api $cluster_name followJobLog build-$apptag-$version', 'play.sh', 40);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (146, 'apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: build-{{apptag}}-{{version}}\nspec:\n  template:\n    spec:\n      securityContext:\n        runAsUser: 1000\n        runAsGroup: 1000\n      volumes:\n      - name: gradle\n        hostPath:\n            path: /opt/gradle\n      containers:\n      - name: build\n        image: {{docker_registry}}/tq/build:java\n        volumeMounts:\n        - name: gradle\n          mountPath: /home/gradle/.gradle\n        env:\n        - name: GIT_BRANCHES\n          value: {{git_branches}}\n        - name: GIT_URL\n          value: "{{git_url}}"\n        - name: BUILD_PATH\n          value: {{build_path}}\n        - name: BUILD_TASK\n          value: {{build_task}}\n      restartPolicy: Never\n  backoffLimit: 0\n  activeDeadlineSeconds: {{active}}\n  ttlSecondsAfterFinished: {{ttl}}', 'build.yml', 40);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (147, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\n\nansible-playbook -i hosts operation.yml', 'play.sh', 41);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (148, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 回滚\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl rollout undo deployments/{{apptag}}-{{version}}\n      become: true\n      become_user: "op"\n      register: rollout\n\n    - name: 显示执行结果\n      debug:\n        msg: "{{ rollout.stdout }}"', 'operation.yml', 41);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (149, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 回滚\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl rollout undo deployments/{{apptag}}-{{version}}\n      become: true\n      become_user: "op"\n      register: rollout\n\n    - name: 显示执行结果\n      debug:\n        msg: "{{ rollout.stdout }}"', 'operation.yml', 42);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (150, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\n\nansible-playbook -i hosts operation.yml', 'play.sh', 42);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (156, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 重启应用\n      shell: kubectl get deployment {{apptag}}-{{version}} -o yaml | kubectl replace --force -f -\n      become: true\n      become_user: "op"\n      register: restart\n\n    - name: 显示执行结果\n      debug:\n        msg: "{{ restart.stdout }}"\n', 'operation.yml', 45);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (157, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 45);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (158, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 46);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (159, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 重启应用\n      shell: kubectl get deployment {{apptag}}-{{version}} -o yaml | kubectl replace --force -f -\n      become: true\n      become_user: "op"\n      register: restart\n\n    - name: 显示执行结果\n      debug:\n        msg: "{{ restart.stdout }}"\n', 'operation.yml', 46);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (160, 'apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: publish-{{apptag}}-{{version}}\nspec:\n  template:\n    spec:\n      securityContext:\n        runAsUser: 1000\n        runAsGroup: 1000\n      volumes:\n      - name: gradle\n        hostPath:\n            path: /opt/gradle\n      containers:\n      - name: publish\n        image: {{docker_registry}}/tq/publish-to-svn:tomcat\n        volumeMounts:\n        - name: gradle\n          mountPath: /home/gradle/.gradle\n        env:\n        - name: GIT_BRANCHES\n          value: {{git_branches}}\n        - name: GIT_URL\n          value: "{{git_url}}"\n        - name: BUILD_PATH\n          value: {{build_path}}\n        - name: BUILD_TASK\n          value: {{build_task}}\n        - name: BUILD_DEST\n          value: {{build_dest}}\n        - name: PUBLISH_SVN_PATH\n          value: "svn://10.79.186.29:8000/{{apptag}}/{{repository}}"\n        - name: VERSION_ID\n          value: "{{version_id}}"\n        - name: BUILD_NO\n          value: "{{build_no}}"\n        - name: DEPLOY_SERVER\n          value: "10.79.186.29:8062"\n        - name: USER_TOKEN\n          value: "{{user_token}}"\n      restartPolicy: Never\n  backoffLimit: 0\n  activeDeadlineSeconds: {{active}}\n  ttlSecondsAfterFinished: {{ttl}}', 'publish.yml', 47);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (161, '- hosts: buildserver\n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除旧部署文件\n      file: path=/home/op/{{apptag}}-{{version}}/ state=absent\n      become: yes\n\n    - name: 创建目录\n      file: path=\'/home/op/{{apptag}}-{{version}}\' state=directory mode=0755\n      become: yes\n      become_user: "op"\n\n    - name: 使用模版配置部署脚本\n      template: src=publish.yml dest=/home/op/{{apptag}}-{{version}}/\n      become: yes\n      become_user: "op"\n\n    - name: 删除最近一次构建任务\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl delete jobs/publish-{{apptag}}-{{version}}\n      become: true\n      become_user: "op"\n      register: deleteJob\n      ignore_errors: yes\n\n    - name: 显示构建任务删除结果\n      debug:\n        msg: "{{ deleteJob.stdout }}"\n      ignore_errors: yes\n\n    - name: 在K8S集群上启动构建任务\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl apply -f ./publish.yml\n      become: true\n      become_user: "op"\n      register: apply\n\n    - name: 显示映像生成结果\n      debug:\n        msg: "{{ apply.stdout }}"\n\n    - name: 等待5秒\n      wait_for: \'timeout=5\'\n      delegate_to: localhost\n', 'operation.yml', 47);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (162, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nif [ -r "$PRGDIR/vars.sh" ]; then\n  . "$PRGDIR/vars.sh"\nfi\nexport JAVA_OPTS=\nset -o errexit \\\n    && ansible-playbook -i hosts operation.yml \\\n    && kube-api weather-dev followJobLog publish-$apptag-$version "BUILD SUCCESSFUL in \\d+"\\\n    && ansible-playbook -i hosts deploy-operation.yml', 'play.sh', 47);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (164, '[buildserver]\n172.17.149.10', 'hosts', 47);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (165, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n\n    - name: 测试服务是否运行\n      shell: ps ax | grep /home/{{apptag}}/tomcat | grep java | grep -v grep | awk \'{print $1}\'\n      register: running\n\n    - name: 将服务置为离线状态\n      uri:\n        url: http://localhost:{{http_port}}/heartbeat\n        method: PUT\n        body: "OFFLINE;c701e78243404508a08f021a4ac8966d"\n      when: running.stdout!=\'\'\n      ignore_errors: yes\n\n    - name: 确认服务已在离线状态\n      uri: \n          url: http://localhost:{{http_port}}/heartbeat\n          return_content: true\n      register: heartbeat\n      failed_when: "\'OFFLINE\' not in heartbeat.content"\n      when: running.stdout!=\'\'\n      ignore_errors: yes\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},离线,offline,状态,"\n      when: running.stdout!=\'\' and "\'OFFLINE\' in heartbeat.content"\n\n    - name: 延迟10秒\n      wait_for: \'timeout=10\'\n      delegate_to: localhost\n      when: running.stdout!=\'\'\n\n    - name: 停止Tomcat服务\n      service: name=tomcat-{{apptag}} state=stopped\n      become: yes\n\n    - name: 确认服务端口已关闭\n      wait_for: \'port={{http_port}} state=stopped timeout=30\'\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},已停止,stopped,状态,"\n\n    - name: 等待10秒\n      wait_for: \'timeout=10\'\n      delegate_to: localhost\n      when: running.stdout!=\'\'\n\n    - name: 删除旧部署文件\n      file: path=/home/{{apptag}}/tomcat/webapps/{{apptag}} state=absent\n      become: yes\n\n    - name: 从资源库下载部署文件\n      subversion: repo=svn://10.79.186.29:8000/{{apptag}}/{{repository}} dest=/home/{{apptag}}/tomcat/webapps/{{apptag}} force=no export=yes username=deploy password=unicorn4Felink revision={{revision}}\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 查询版本信息\n      shell: svn info svn://10.79.186.29:8000/{{apptag}}/{{repository}} --username deploy --password unicorn4Felink  --no-auth-cache\n      register: verinfo\n\n    - name: 保存版本信息\n      copy:\n        content: \'{{ verinfo.stdout }}\'\n        dest: /home/{{apptag}}/REVISION\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 显示版本信息\n      debug:\n        msg: "{{ verinfo.stdout }}"\n\n    - name: 更新最近用于部署的构建号\n      uri:\n        url: http://10.79.186.29:8062/api/versions/{{version_id}}/deploy?token={{user_token}}&buildno={{build_no}}\n        method: PUT\n        body: "{{user_token}}"\n      ignore_errors: yes\n\n    - name: 启动Tomcat服务\n      service: name=tomcat-{{apptag}} state=started\n      become: yes\n\n    - name: 等待服务启动\n      wait_for: \'port={{http_port}} state=started timeout=30\'\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},运行中,running,状态,"\n\n    - name: 等待10秒\n      wait_for: \'timeout=10\'\n      delegate_to: localhost\n\n    - name: 状态测试\n      uri: \n          url: http://localhost:{{http_port}}/heartbeat\n          return_content: true\n      register: status\n      ignore_errors: yes\n\n    - name: 设置离线状态\n      debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},离线,offline,状态,"\n      when: "\'OFFLINE\' in status.content"\n\n    - name: 设置在线状态\n      debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},在线,online,状态,"\n      when: "\'ONLINE\' in status.content"\n', 'deploy-operation.yml', 47);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (166, 'apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: publish-{{apptag}}-{{version}}\nspec:\n  template:\n    spec:\n      securityContext:\n        runAsUser: 1000\n        runAsGroup: 1000\n      volumes:\n      - name: gradle\n        hostPath:\n            path: /opt/gradle\n      containers:\n      - name: publish\n        image: {{docker_registry}}/tq/publish-to-svn:tomcat\n        volumeMounts:\n        - name: gradle\n          mountPath: /home/gradle/.gradle\n        env:\n        - name: GIT_BRANCHES\n          value: {{git_branches}}\n        - name: GIT_URL\n          value: "{{git_url}}"\n        - name: BUILD_PATH\n          value: {{build_path}}\n        - name: BUILD_TASK\n          value: {{build_task}}\n        - name: BUILD_DEST\n          value: {{build_dest}}\n        - name: PUBLISH_SVN_PATH\n          value: "svn://10.79.186.29:8000/{{apptag}}/{{repository}}"\n        - name: VERSION_ID\n          value: "{{version_id}}"\n        - name: BUILD_NO\n          value: "{{build_no}}"\n        - name: DEPLOY_SERVER\n          value: "10.79.186.29:8062"\n        - name: USER_TOKEN\n          value: "{{user_token}}"\n      restartPolicy: Never\n  backoffLimit: 0\n  activeDeadlineSeconds: {{active}}\n  ttlSecondsAfterFinished: {{ttl}}', 'publish.yml', 48);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (167, '[buildserver]\n172.17.149.10', 'hosts', 48);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (168, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 获取进程PID\n      shell: ps ax | grep /home/{{apptag}}/{{apptag}} | grep java | grep -v grep | awk \'{print $1}\'\n      become: yes\n      register: running\n\n    - name: 停止服务\n      service: name=java-{{apptag}} state=stopped\n      become: yes\n\n    - name: 等待JMX端口关闭\n      wait_for: \'port={{jmx_port}} state=stopped timeout=10\'\n\n    - debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},已停止,stopped,状态,"\n\n    - name: 延迟10秒\n      wait_for: \'timeout=10\'\n      delegate_to: localhost\n      when: running.stdout!=\'\'\n\n    - name: 删除旧部署文件\n      file: path=/home/{{apptag}}/{{apptag}} state=absent\n      become: yes\n\n    - name: 从资源库下载部署文件\n      subversion: repo=svn://10.79.186.29:8000/{{apptag}}/{{repository}} dest=/home/{{apptag}}/{{apptag}} force=no username=deploy password=unicorn4Felink revision={{revision}}\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 查询版本信息\n      shell: svn info svn://10.79.186.29:8000/{{apptag}}/{{repository}} --username deploy --password unicorn4Felink  --no-auth-cache\n      register: verinfo\n\n    - name: 保存版本信息\n      copy:\n        content: \'{{ verinfo.stdout }}\'\n        dest: /home/{{apptag}}/REVISION\n      become: yes\n      become_user: "{{apptag}}"\n\n    - name: 显示版本信息\n      debug:\n        msg: "{{ verinfo.stdout }}"\n\n    - name: 创建日志目录链接\n      file:\n        src: /home/{{apptag}}/logs\n        dest: /home/{{apptag}}/{{apptag}}/logs\n        state: link\n      become: yes\n      become_user: "{{apptag}}"\n      ignore_errors: yes\n\n  post_tasks:\n    - name: 启动服务\n      service: name=java-{{apptag}} state=started\n      become: yes\n\n    - name: 等待服务启动\n      wait_for: \'port={{jmx_port}} state=started timeout=30\'\n\n    - name: 设置进程状态\n      debug:\n        msg: "@@SET_HOST_STATUS {{inventory_hostname}},运行中,running,状态,"\n', 'deploy-operation.yml', 48);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (169, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nif [ -r "$PRGDIR/vars.sh" ]; then\n  . "$PRGDIR/vars.sh"\nfi\nexport JAVA_OPTS=\nset -o errexit \\\n    && ansible-playbook -i hosts operation.yml \\\n    && kube-api weather-dev followJobLog publish-$apptag-$version "BUILD SUCCESSFUL in \\d+"\\\n    && ansible-playbook -i hosts deploy-operation.yml', 'play.sh', 48);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (170, '- hosts: buildserver\n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 删除旧部署文件\n      file: path=/home/op/{{apptag}}-{{version}}/ state=absent\n      become: yes\n\n    - name: 创建目录\n      file: path=\'/home/op/{{apptag}}-{{version}}\' state=directory mode=0755\n      become: yes\n      become_user: "op"\n\n    - name: 使用模版配置部署脚本\n      template: src=publish.yml dest=/home/op/{{apptag}}-{{version}}/\n      become: yes\n      become_user: "op"\n\n    - name: 删除最近一次构建任务\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl delete jobs/publish-{{apptag}}-{{version}}\n      become: true\n      become_user: "op"\n      register: deleteJob\n      ignore_errors: yes\n\n    - name: 显示构建任务删除结果\n      debug:\n        msg: "{{ deleteJob.stdout }}"\n      ignore_errors: yes\n\n    - name: 在K8S集群上启动构建容器\n      command: chdir=/home/op/{{apptag}}-{{version}} kubectl apply -f ./publish.yml\n      become: true\n      become_user: "op"\n      register: apply\n\n    - name: 显示构建容器生成结果\n      debug:\n        msg: "{{ apply.stdout }}"\n\n    - name: 等待5秒\n      wait_for: \'timeout=5\'\n      delegate_to: localhost\n', 'operation.yml', 48);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (171, '- hosts: deploy_target \n  remote_user: op\n  vars_files:\n    - vars.yml\n  tasks:\n    - name: 停止应用\n      shell: kubectl delete deployment {{apptag}}-{{version}}\n      become: true\n      become_user: "op"\n      register: delete\n\n    - name: 显示执行结果\n      debug:\n        msg: "{{ delete.stdout }}"\n', 'operation.yml', 49);
INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (172, '#!/bin/bash\nPRG="$0"\nPRGDIR=`dirname "$PRG"`\ncd $PRGDIR\nexport ANSIBLE_HOME=$HOME/ansible\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\nexport PATH=$PATH:$ANSIBLE_HOME/bin\nexport LANG=en_US.UTF-8\nansible-playbook -i hosts operation.yml', 'play.sh', 49);
INSERT INTO `dp2_operation_var_define` (`id`, `default_value`, `form_label`, `input_addon`, `name`, `operation_id`) VALUES (1, '10000', '最大读取字节数', '', 'op_limit_bytes', 33);
INSERT INTO `dp2_operation_var_define` (`id`, `default_value`, `form_label`, `input_addon`, `name`, `operation_id`) VALUES (4, '2021-03-01T10:00:00+08:00', '日志开始时间', '', 'op_since_time', 33);
INSERT INTO `dp2_operation_var_define` (`id`, `default_value`, `form_label`, `input_addon`, `name`, `operation_id`) VALUES (5, '10', '从末尾开始的行数（>0有效）', '', 'tail_lines', 33);
INSERT INTO `dp2_operation_var_define` (`id`, `default_value`, `form_label`, `input_addon`, `name`, `operation_id`) VALUES (6, '10000', '最大读取字节数', '', 'op_limit_bytes', 38);
INSERT INTO `dp2_operation_var_define` (`id`, `default_value`, `form_label`, `input_addon`, `name`, `operation_id`) VALUES (7, '2021-03-01T10:00:00+08:00', '日志开始时间', '', 'op_since_time', 38);
INSERT INTO `dp2_operation_var_define` (`id`, `default_value`, `form_label`, `input_addon`, `name`, `operation_id`) VALUES (8, '10', '从末尾开始的行数（>0有效）', '', 'tail_lines', 38);
INSERT INTO `dp2_operation_var_define` (`id`, `default_value`, `form_label`, `input_addon`, `name`, `operation_id`) VALUES (10, 'develop', '源代码分支', '', 'git_branches', 35);
INSERT INTO `dp2_operation_var_define` (`id`, `default_value`, `form_label`, `input_addon`, `name`, `operation_id`) VALUES (11, 'develop', '源代码分支', '', 'git_branches', 28);
INSERT INTO `dp2_operation_var_define` (`id`, `default_value`, `form_label`, `input_addon`, `name`, `operation_id`) VALUES (12, 'develop', '源代码分支', '', 'git_branches', 40);
INSERT INTO `dp2_operation_var_define` (`id`, `default_value`, `form_label`, `input_addon`, `name`, `operation_id`) VALUES (13, 'develop', '源代码分支', '', 'git_branches', 39);
INSERT INTO `dp2_operation_var_define` (`id`, `default_value`, `form_label`, `input_addon`, `name`, `operation_id`) VALUES (14, 'develop', '源代码分支', '', 'git_branches', 47);
INSERT INTO `dp2_operation_var_define` (`id`, `default_value`, `form_label`, `input_addon`, `name`, `operation_id`) VALUES (15, 'develop', '源代码分支', '', 'git_branches', 48);
INSERT INTO `dp2_operation_var_define` (`id`, `default_value`, `form_label`, `input_addon`, `name`, `operation_id`) VALUES (16, 'deploy', '源代码分支', '', 'git_branches', 31);
