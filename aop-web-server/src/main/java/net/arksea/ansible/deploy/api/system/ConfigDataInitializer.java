package net.arksea.ansible.deploy.api.system;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;

/**
 * Create by xiaohaixing on 2020/9/24
 */
@Component
public class ConfigDataInitializer {

    Logger logger = LogManager.getLogger(ConfigDataInitializer.class);

    @Autowired
    DataSource dataSource;

    JdbcTemplate jdbcTemplate;

    //初始化静态配置表
    @PostConstruct
    public void init() throws SQLException {
        jdbcTemplate = new JdbcTemplate(dataSource);
        int count = jdbcTemplate.queryForObject("select count(*) from sys_roles", Integer.class);
        if (count == 0) {
            Connection conn = dataSource.getConnection();
            boolean autoCommit = conn.getAutoCommit();
            conn.setAutoCommit(false);
            try {
                initRoles(conn);
                initAppType(conn);
                conn.commit();
            } catch (Exception ex) {
                conn.rollback();
                throw ex;
            } finally {
                conn.setAutoCommit(autoCommit);
                try {
                    conn.close();
                } catch (Exception ex) {
                    logger.error("close Connection failed", ex);
                }
            }
        }
    }

    private void initRoles(Connection conn) throws SQLException {
        conn.prepareStatement("INSERT INTO `sys_roles` (`id`, `available`, `description`, `role`) VALUES (1, b'1', '系统信息增、删、改：用户，群组，主机', '系统管理员')").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_roles` (`id`, `available`, `description`, `role`) VALUES (2, b'1', '系统信息查询：用户、群组、主机', '系统信息查询')").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_roles` (`id`, `available`, `description`, `role`) VALUES (3, b'1', '应用部署', '应用部署')").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_roles` (`id`, `available`, `description`, `role`) VALUES (4, b'1', '端口管理', '端口管理')").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_roles` (`id`, `available`, `description`, `role`) VALUES (5, b'1', '添加应用类型，编辑应用操作脚本', '操作管理')").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_roles` (`id`, `available`, `description`, `role`) VALUES (6, b'1', '查看操作脚本', '操作查询')").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_roles` (`id`, `available`, `description`, `role`) VALUES (7, b'1', '应用增、删、改', '应用管理')").executeUpdate();

        conn.prepareStatement("INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (1, b'1', '组信息管理', '组管理:修改', 902)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (2, b'1', '组信息查询', '组管理:查询', 901)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (3, b'1', '用户信息管理', '用户管理:修改', 902)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (4, b'1', '用户信息查询', '用户管理:查询', 901)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (5, b'1', '应用管理', '应用:修改', NULL)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (6, b'1', '执行应用的操作脚本', '应用:操作', NULL)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (7, b'1', '应用信息查询', '应用:查询', NULL)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (8, b'1', '端口管理', '端口管理:修改', NULL)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (9, b'1', '端口查询', '端口管理:查询', 901)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (10, b'1', '增删改操作信息', '操作管理:修改', NULL)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (11, b'1', '查询操作脚本', '操作管理:查询', NULL)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (901, b'1', '查询系统信息', '系统:查询', 902)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_permissions` (`id`, `available`, `description`, `permission`, `pid`) VALUES (902, b'1', '增删改系统信息', '系统:管理', NULL)").executeUpdate();

        conn.prepareStatement("INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (1, 902)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (2, 901)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (3, 6)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (3, 7)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (4, 8)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (4, 9)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (5, 10)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (5, 11)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (6, 11)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (7, 5)").executeUpdate();
        conn.prepareStatement("INSERT INTO `sys_roles_permissions` (`role_id`, `permission_id`) VALUES (7, 7)").executeUpdate();
    }

    private void initAppType(Connection conn) throws SQLException {
        conn.prepareStatement("INSERT INTO `dp2_app_type` (`id`, `description`, `name`) VALUES (1, 'Java Web应用，容器为Tomcat8.0.3', 'Tomcat')").executeUpdate();

        conn.prepareStatement("INSERT INTO `dp2_port_type` (`id`, `all_count`, `description`, `name`, `rest_count`) VALUES (1, 0, 'Web站点或RestAPI接口', 'HTTP', 0)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_port_type` (`id`, `all_count`, `description`, `name`, `rest_count`) VALUES (2, 0, '通用端口', '通用', 0)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_port_type` (`id`, `all_count`, `description`, `name`, `rest_count`) VALUES (3, 0, '应用服务端口', '应用', 0)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_port_type` (`id`, `all_count`, `description`, `name`, `rest_count`) VALUES (8, 0, 'JMX监控', 'JMX', 0)").executeUpdate();

        conn.prepareStatement("INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (1, 1, '', ' 服务管理端口', '', 'server_port', 2)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (2, 1, '', 'HTTP端口', '', 'http_port', 1)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (3, 1, '', 'HTTPS端口', '', 'https_port', 2)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (4, 1, '', 'AJP端口', '', 'ajp_port', 2)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_var_define` (`id`, `app_type_id`, `default_value`, `form_label`, `input_addon`, `name`, `port_type_id`) VALUES (5, 1, '', 'JMX监控端口', '', 'jmx_port', 8)").executeUpdate();

        conn.prepareStatement("INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (1, 'play.sh', '在目标主机安装运行环境：包括创建用户、安装配置JDK、Tomcat等运行环境', '安装', 0, 'COMMON', 1)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (2, 'play.sh', '请求服务心跳API接口，将其设置为OFFLINE状态', '下线', 0, 'COMMON', 1)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (3, 'play.sh', '请求服务心跳API接口，将其设置为ONLINE状态', '上线', 0, 'COMMON', 1)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (4, 'play.sh', '访问心跳API接口，测试服务在线状态', '状态', 0, 'STATUS', 1)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (5, 'play.sh', '从部署SVN更新资源并重启服务，更新前会先将其设置为OFFLINE状态并停止服务', '发布', 0, 'COMMON', 1)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (8, 'play.sh', '停止Tomcat服务进程', '停止', 0, 'COMMON', 1)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation` (`id`, `command`, `description`, `name`, `released`, `type`, `app_type_id`) VALUES (9, 'play.sh', '启动Tomcat服务', '启动', 0, 'COMMON', 1)").executeUpdate();

        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (1, '- hosts: deploy_target\\n  remote_user: op\\n  vars_files:\\n    - vars.yml\\n  tasks:\\n    - name: 添加用户组\"tomcat\"\\n      group: name=tomcat\\n      become: yes\\n\\n    - name: 添加应用运行用户\"{{ apptag }}\"\\n      user: name={{apptag}} group=tomcat createhome=yes\\n      become: yes\\n\\n    - name: 判断JDK目录是否已存在\\n      stat: path=/opt/jdk1.8.0_66\\n      register: jdkDir\\n\\n    - name: 下载JDK\\n      subversion: repo=svn://10.79.186.29:8000/download/jdk/jdk-8u66-linux-x64.tar.gz dest=/opt/jdk-8u66-linux-x64.tar.gz force=yes export=yes username=deploy password=unicorn4Felink\\n      become: yes\\n      when: jdkDir.stat.exists == false\\n\\n    - name: 解压JDK安装包\\n      unarchive: src=/opt/jdk-8u66-linux-x64.tar.gz dest=/opt copy=no\\n      become: yes\\n      when: jdkDir.stat.exists == false\\n\\n    - name: 修改JDK目录owner与group\\n      file: path=/opt//opt/jdk1.8.0_66 owner=root group=root state=directory recurse=yes\\n      become: yes\\n      when: jdkDir.stat.exists == false\\n\\n    - name: 判断Tomcat目录是否已存在\\n      stat: path=/home/{{apptag}}/tomcat-8.0.30\\n      register: tomcatDir\\n      become: yes\\n      become_user: \"{{apptag}}\"\\n\\n    - name: 从SVN下载Tomcat8\\n      subversion: repo=svn://10.79.186.29:8000/download/tomcat/tomcat8 dest=/home/{{apptag}}/tomcat-8.0.30 force=no export=yes username=deploy password=unicorn4Felink\\n      notify: restart tomcat\\n      become: yes\\n      become_user: \"{{apptag}}\"\\n      when: tomcatDir.stat.exists == false\\n\\n    - name: 为Tomcat目录创建软连接\\n      file: src=/home/{{apptag}}/tomcat-8.0.30 path=/home/{{apptag}}/tomcat state=link\\n      become: yes\\n      become_user: \"{{apptag}}\"\\n      when: tomcatDir.stat.exists == false\\n\\n    - name: 使用模版配置Tomcat服务器\\n      template: src=server.xml dest=/home/{{apptag}}/tomcat/conf/\\n      become: yes\\n      become_user: \"{{apptag}}\"\\n\\n    - name: 配置Tomcat环境变量\\n      template: src=setenv.sh dest=/home/{{apptag}}/tomcat/bin/setenv.sh mode=0644 owner={{apptag}} group=tomcat\\n      become: yes\\n\\n    - name: 配置 jmx 访问权限\\n      template: src=jmx.access dest=/home/{{apptag}}/tomcat/bin/ mode=0400 owner={{apptag}} group=tomcat\\n      become: yes\\n\\n    - name: 配置 jmx 账号密码\\n      template: src=jmx.password dest=/home/{{apptag}}/tomcat/bin/ mode=0400 owner={{apptag}} group=tomcat\\n      become: yes\\n\\n    - name: 安装系统服务\\n      template: src=tomcat-initscript.sh dest=/etc/init.d/tomcat-{{apptag}} mode=0755\\n      become: yes\\n\\n- hosts: svnhost\\n  remote_user: op\\n  vars_files:\\n    - vars.yml\\n  tasks:\\n    - name: 确认SVN库是否已创建\\n      stat: path=/data/javasvn/{{apptag}}\\n      register: rep\\n      become: true\\n\\n    - name: 初始化SVN库目录 \\n      command: chdir=/data/javasvn svnadmin create {{apptag}}\\n      when: rep.stat.exists == False\\n      become: true\\n\\n    - name: 配置SVN库\\n      copy: src=svnserve.conf dest=/data/javasvn/{{apptag}}/conf mode=644\\n      become: true\\n', 'operation.yml', 1)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (2, '#!/bin/bash\\ncd $(dirname $0)\\nexport ANSIBLE_HOME=$HOME/ansible\\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\\nexport PATH=$PATH:$ANSIBLE_HOME/bin\\nexport LANG=en_US.UTF-8\\nansible-playbook -i hosts operation.yml', 'play.sh', 1)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (3, '<?xml version=\\'1.0\\' encoding=\\'utf-8\\'?>\\n<Server port=\"{{ server_port }}\" shutdown=\"SHUTDOWN\">\\n  <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\\n  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\\n  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\\n  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\\n  <Service name=\"Catalina\">\\n    <Connector port=\"{{ http_port }}\" protocol=\"HTTP/1.1\"\\n               connectionTimeout=\"20000\"\\n               redirectPort=\"{{ https_port }}\" />\\n    <Connector port=\"{{ ajp_port }}\" protocol=\"AJP/1.3\" redirectPort=\"{{ https_port }}\" />\\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\\n      <Host name=\"localhost\"  appBase=\"webapps/{{apptag}}\" unpackWARs=\"false\" autoDeploy=\"false\">\\n        <Context path=\"\" docBase=\"\"  reloadable=\"true\" caseSensitive=\"false\" debug=\"0\"></Context>\\n      </Host>\\n    </Engine>\\n  </Service>\\n</Server>\\n', 'server.xml', 1)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (4, '#!/bin/bash\\n\\nexport JAVA_HOME=/opt/jdk1.8.0_66\\nexport PRODUCT_HOME=/home/{{apptag}}\\n\\nJAVA_OPTS=\"$JAVA_OPTS {{exec_opt}}\"\\nJAVA_OPTS=\"$JAVA_OPTS -XX:+UseG1GC -XX:+PrintClassHistogram -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCDetails\"\\nJAVA_OPTS=\"$JAVA_OPTS -Xloggc:$PRODUCT_HOME/tomcat/logs/gc.log\"\\nJAVA_OPTS=\"$JAVA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.ssl=false\"\\nJAVA_OPTS=\"$JAVA_OPTS -Dcom.sun.management.jmxremote.port={{jmx_port}} -Dcom.sun.management.jmxremote.rmi.port={{jmx_port}} -Djava.rmi.server.hostname={{inventory_hostname}}\"\\nJAVA_OPTS=\"$JAVA_OPTS -Dcom.sun.management.jmxremote.password.file=$PRODUCT_HOME/tomcat/bin/jmx.password -Dcom.sun.management.jmxremote.access.file=$PRODUCT_HOME/tomcat/bin/jmx.access\"\\nexport JAVA_OPTS\\n\\nexport LANG=en_US.UTF-8\\n', 'setenv.sh', 1)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (5, 'user   readonly\\nadmin  readwrite \\\\\\n              create javax.management.monitor.*,javax.management.timer.* \\\\\\n              unregister\\n', 'jmx.access', 1)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (6, 'admin  unicornAdmin@felink\\nuser  unicorn@felink', 'jmx.password', 1)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (7, '#!/bin/bash\\n#\\n# chkconfig: 345 99 28\\n# description: Starts/Stops Apache Tomcat\\n#\\n \\nexport CATALINA_HOME=/home/{{apptag}}/tomcat  \\nexport CATALINA_BASE=/home/{{apptag}}/tomcat\\nexport TOMCAT_USER={{apptag}}\\nexport LANG=en_US.UTF-8\\n \\n#TOMCAT_USAGE is the message if this script is called without any options\\nTOMCAT_USAGE=\"Usage: $0 {\\\\e[00;32mstart\\\\e[00m|\\\\e[00;31mstop\\\\e[00m|\\\\e[00;32mstatus\\\\e[00m|\\\\e[00;31mrestart\\\\e[00m}\"\\n \\n#SHUTDOWN_WAIT is wait time in seconds for java proccess to stop\\nSHUTDOWN_WAIT=20\\n \\ntomcat_pid() {\\n  echo `ps -fe | grep $CATALINA_BASE | grep -v grep | tr -s \" \"|cut -d\" \" -f2`\\n}\\n \\nstart() {\\n  pid=$(tomcat_pid)\\n  if [ -n \"$pid\" ]\\n  then\\n    echo -e \"\\\\e[00;31mTomcat is already running (pid: $pid)\\\\e[00m\"\\n  else\\n    echo -e \"\\\\e[00;32mStarting tomcat\\\\e[00m\"\\n    #ulimit -n 100000\\n    #umask 007\\n    su - $TOMCAT_USER -c $CATALINA_HOME/bin/startup.sh\\n    status\\n  fi\\n  return 0\\n}\\n \\nstatus(){\\n  pid=$(tomcat_pid)\\n  if [ -n \"$pid\" ]; then echo -e \"\\\\e[00;32mTomcat is running with pid: $pid\\\\e[00m\"\\n  else echo -e \"\\\\e[00;31mTomcat is not running\\\\e[00m\"\\n  fi\\n}\\n \\nstop() {\\n  pid=$(tomcat_pid)\\n  if [ -n \"$pid\" ]\\n  then\\n    echo -e \"\\\\e[00;31mStoping Tomcat\\\\e[00m\"\\n    su - $TOMCAT_USER -c $CATALINA_HOME/bin/shutdown.sh\\n    sleep 3\\n    # Notify the Java Runtime ShutdownHooks\\n    kill $pid\\n    sleep 2\\n    let kwait=$SHUTDOWN_WAIT\\n    count=0;\\n    until [ `ps -p $pid | grep -c $pid` = \\'0\\' ] || [ $count -gt $kwait ]\\n    do\\n      echo -n -e \"\\\\n\\\\e[00;31mwaiting for processes to exit\\\\e[00m\";\\n      sleep 1\\n      let count=$count+1;\\n    done\\n    if [ $count -gt $kwait ]; then\\n      echo -n -e \"\\\\n\\\\e[00;31mkilling processes which didn\\'t stop after $SHUTDOWN_WAIT seconds\\\\e[00m\"\\n      kill -9 $pid\\n    fi\\n  else\\n    echo -e \"\\\\e[00;31mTomcat is not running\\\\e[00m\"\\n  fi\\n \\n  return 0\\n}\\n \\ncase \"$1\" in\\nstart)   start;;\\nstop)    stop;;\\nrestart) stop\\n    start\\n    ;;\\nstatus)  status;;\\n*)  echo -e $TOMCAT_USAGE;;\\nesac\\nexit 0\\n', 'tomcat-initscript.sh', 1)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (8, '[general]\\nanon-access = none\\nauth-access = write\\npassword-db = ../../passwd\\nauthz-db = ../../authz', 'svnserve.conf', 1)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (10, '[svnhost]\\n10.79.186.29\\n\\n', 'hosts', 1)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (11, '- hosts: deploy_target \\n  remote_user: op\\n  vars_files:\\n    - vars.yml\\n  tasks:\\n\\n    - name: 测试服务是否运行\\n      wait_for: \\'port={{http_port}} state=started timeout=10\\'\\n      register: running\\n\\n    - name: 将服务置为离线状态\\n      shell: curl -X PUT -d \"OFFLINE;c701e78243404508a08f021a4ac8966d\" http://localhost:{{http_port}}/heartbeat\\n      become: yes\\n      when: running.state==\\'started\\'\\n\\n    - name: 确认服务已离线\\n      uri: \\n          url: http://localhost:{{http_port}}/heartbeat\\n          return_content: true\\n      become: yes\\n      register: heartbeat\\n      failed_when: \"\\'OFFLINE\\' not in heartbeat.content\"\\n      when: running.state==\\'started\\'\\n\\n    - name: 延迟10秒\\n      wait_for: \\'timeout=10\\'\\n      delegate_to: localhost\\n\\n    - name: 停止Tomcat服务\\n      service: name=tomcat-{{apptag}} state=stopped\\n      become: yes\\n\\n    - name: 测试服务是否运行\\n      wait_for: \\'port={{http_port}} state=stopped timeout=10\\'\\n      register: running\\n\\n    - name: 删除旧部署文件\\n      file: path=/home/{{apptag}}/tomcat/webapps/{{apptag}} state=absent\\n      become: yes\\n\\n    - name: 从资源库下载部署文件\\n      subversion: repo=svn://10.79.186.29:8000/{{apptag}}/{{repository}} dest=/home/{{apptag}}/tomcat/webapps/{{apptag}} force=no username=deploy password=unicorn4Felink revision={{revision}}\\n      become: yes\\n      become_user: \"{{apptag}}\"\\n\\n    - name: 启动Tomcat服务\\n      service: name=tomcat-{{apptag}} state=started\\n      become: yes\\n\\n    - name: 等待服务启动\\n      wait_for: \\'port={{http_port}} state=started timeout=120\\'\\n', 'operation.yml', 5)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (12, '#!/bin/bash\\ncd $(dirname $0)\\nexport ANSIBLE_HOME=$HOME/ansible\\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\\nexport PATH=$PATH:$ANSIBLE_HOME/bin\\nexport LANG=en_US.UTF-8\\nansible-playbook -i hosts operation.yml', 'play.sh', 5)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (13, '- hosts: deploy_target \\n  remote_user: op\\n  vars_files:\\n    - vars.yml\\n  tasks:\\n    - name: 测试服务是否运行\\n      wait_for: \\'port={{http_port}} state=started timeout=10\\'\\n      register: running\\n\\n    - name: 将服务置为离线状态\\n      shell: curl -X PUT -d \"OFFLINE;c701e78243404508a08f021a4ac8966d\" http://localhost:{{http_port}}/heartbeat\\n      become: yes\\n      when: running.state==\\'started\\'\\n\\n    - name: 确认服务已在离线状态\\n      uri: \\n          url: http://localhost:{{http_port}}/heartbeat\\n          return_content: true\\n      become: yes\\n      register: heartbeat\\n      failed_when: \"\\'OFFLINE\\' not in heartbeat.content\"\\n      when: running.state==\\'started\\'\\n', 'operation.yml', 2)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (14, '#!/bin/bash\\ncd $(dirname $0)\\nexport ANSIBLE_HOME=$HOME/ansible\\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\\nexport PATH=$PATH:$ANSIBLE_HOME/bin\\nexport LANG=en_US.UTF-8\\nansible-playbook -i hosts operation.yml', 'play.sh', 2)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (15, '- hosts: deploy_target \\n  remote_user: op\\n  vars_files:\\n    - vars.yml\\n  tasks:\\n    - name: 将服务置为在线状态\\n      shell: curl -X PUT -d \"ONLINE;c701e78243404508a08f021a4ac8966d\" http://localhost:{{http_port}}/heartbeat\\n      become: yes\\n\\n    - name: 确认服务已在线\\n      uri: \\n          url: http://localhost:{{http_port}}/heartbeat\\n          return_content: true\\n      become: yes\\n      register: heartbeat\\n      failed_when: \"\\'ONLINE\\' not in heartbeat.content\"\\n', 'operation.yml', 3)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (16, '#!/bin/bash\\ncd $(dirname $0)\\nexport ANSIBLE_HOME=$HOME/ansible\\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\\nexport PATH=$PATH:$ANSIBLE_HOME/bin\\nexport LANG=en_US.UTF-8\\nansible-playbook -i hosts operation.yml', 'play.sh', 3)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (17, '#!/bin/bash\\ncd $(dirname $0)\\nexport ANSIBLE_HOME=$HOME/ansible-2.2.0\\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\\nexport GROOVY_HOME=$HOME/groovy-2.4.10\\nexport JAVA_HOME=/opt/jdk1.8.0_66\\nexport JAVA_OPTS=\"-Dfile.encoding=utf-8\"\\nexport PATH=$PATH:$ANSIBLE_HOME/bin:$GROOVY_HOME/bin\\nexport LANG=en_US.UTF-8\\nansible-playbook -i hosts operation.yml | groovy format.groovy', 'play.sh', 4)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (18, '- hosts: deploy_target \\n  remote_user: op\\n  vars_files:\\n    - vars.yml\\n  tasks:\\n  - name: get app pid\\n    shell: ps ax | grep /home/{{apptag}}/tomcat | grep java | grep -v grep | awk \\'{print $1}\\'\\n    become: yes\\n    register: running\\n\\n  - name: test service running status\\n    shell: echo \"app is running\"\\n    when: running.stdout!=\"\"\\n\\n  - name: heartbeat test\\n    uri: \\n        url: http://localhost:{{http_port}}/heartbeat\\n        return_content: true\\n    become: yes\\n    register: this\\n    failed_when: \"\\'ONLINE\\' not in this.content\"', 'operation.yml', 4)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (20, 'import java.nio.charset.StandardCharsets\\nimport java.util.regex.Matcher\\nimport java.util.regex.Pattern\\n\\nclass Format {\\n    final Pattern resultPattern\\n    final Pattern fatalPattern\\n    final BufferedReader reader\\n    final BufferedWriter writer\\n\\n    Format() {\\n        resultPattern = Pattern.compile(\"(\\\\\\\\w+):\\\\\\\\s*\\\\\\\\[(.+)\\\\\\\\].*\")\\n        fatalPattern = Pattern.compile(\"fatal:\\\\\\\\s*\\\\\\\\[(.+)\\\\\\\\].*\")\\n        reader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8))\\n        writer = new BufferedWriter(new OutputStreamWriter(System.out, StandardCharsets.UTF_8))\\n    }\\n\\n    private void run() {\\n        String line = readLine()\\n        while (line != null && !line.startsWith(\"TASK [heartbeat test]\")) {\\n            line = readLine()\\n        }\\n        if (line != null) {\\n            line = readLine()\\n\\n            while (line != null && !line.trim().isEmpty()) {\\n                final Matcher matcher = resultPattern.matcher(line)\\n                if (matcher.find()) {\\n                    boolean online = matcher.group(1) == \\'ok\\'\\n                    String value = online ? \\'在线\\' : \\'离线\\'\\n                    String key = matcher.group(2)\\n                    int color = online ? 1 : 0\\n                    writer.writeLine(\\'@@SET_HOST_STATUS \\' + key + \\',\\' + value + \\',\\' + color)\\n                }\\n                line = readLine()\\n            }\\n        }\\n        writer.flush()\\n        writer.close()\\n    }\\n\\n    private String readLine() {\\n        String line = reader.readLine()\\n        if (line != null) {\\n            writer.writeLine(line)\\n            final Matcher matcher = fatalPattern.matcher(line)\\n            if (matcher.find()) {\\n                String key = matcher.group(1)\\n                writer.writeLine(\\'@@SET_HOST_STATUS \\'+key+\\',离线,0\\')\\n            }\\n        }\\n        return line\\n    }\\n\\n    static void main(String[] args) {\\n        new Format().run()\\n    }\\n}', 'format.groovy', 4)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (22, '#!/bin/bash\\ncd $(dirname $0)\\nexport ANSIBLE_HOME=$HOME/ansible\\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\\nexport PATH=$PATH:$ANSIBLE_HOME/bin\\nexport LANG=en_US.UTF-8\\nansible-playbook -i hosts operation.yml', 'play.sh', 8)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (23, '- hosts: deploy_target \\n  remote_user: op\\n  vars_files:\\n    - vars.yml\\n  tasks:\\n    - name: 测试服务是否运行\\n      wait_for: \\'port={{http_port}} state=started timeout=10\\'\\n      register: running\\n\\n    - name: 将服务置为离线状态\\n      shell: curl -X PUT -d \"OFFLINE;c701e78243404508a08f021a4ac8966d\" http://localhost:{{http_port}}/heartbeat\\n      become: yes\\n      when: running.state==\\'started\\'\\n\\n    - name: 确认服务已离线\\n      uri: \\n          url: http://localhost:{{http_port}}/heartbeat\\n          return_content: true\\n      become: yes\\n      register: heartbeat\\n      failed_when: \"\\'OFFLINE\\' not in heartbeat.content\"\\n      when: running.state==\\'started\\'\\n\\n    - name: 延迟10秒\\n      wait_for: \\'timeout=10\\'\\n      delegate_to: localhost\\n\\n    - name: 停止Tomcat服务\\n      service: name=tomcat-{{apptag}} state=stopped\\n      become: yes\\n\\n    - name: 等待服务停止\\n      wait_for: \\'port={{http_port}} state=stopped timeout=30\\'\\n', 'operation.yml', 8)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (24, '#!/bin/bash\\ncd $(dirname $0)\\nexport ANSIBLE_HOME=$HOME/ansible\\nexport MANPATH=$MANPATH:$ANSIBLE_HOME/docs/man\\nexport PYTHONPATH=$PYTHONPATH:$ANSIBLE_HOME/lib\\nexport PATH=$PATH:$ANSIBLE_HOME/bin\\nexport LANG=en_US.UTF-8\\nansible-playbook -i hosts operation.yml', 'play.sh', 9)").executeUpdate();
        conn.prepareStatement("INSERT INTO `dp2_app_operation_code` (`id`, `code`, `file_name`, `operation_id`) VALUES (25, '- hosts: deploy_target \\n  remote_user: op\\n  vars_files:\\n    - vars.yml\\n  tasks:\\n    - name: 启动Tomcat服务\\n      service: name=tomcat-{{apptag}} state=started\\n      become: yes\\n\\n    - name: 等待服务启动\\n      wait_for: \\'port={{http_port}} state=started timeout=120\\'\\n', 'operation.yml', 9)").executeUpdate();
    }
}
